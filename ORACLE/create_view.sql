-- TRSDB.TRS_FACT_GROUP_INV_REL source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."TRS_FACT_GROUP_INV_REL" ("ID", "TYPE", "ENTITY_CODE", "INV_ENTITY_CODE", "INV_ENTITY_CAPITAL", "SHARES_HOLD", "START_DATE", "END_DATE", "RATIO_HOLD", "REVIEWED", "INV_ADJITEM_CODE", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME") AS 
  WITH V1 AS (
SELECT ID,
TYPE,
CASE WHEN t1.CURRENT_CODE IS NOT NULL THEN t1.CURRENT_CODE
        ELSE a.ENTITY_CODE end AS ENTITY_CODE,
ENTITY_NAME,
CASE WHEN t2.CURRENT_CODE IS NOT NULL THEN t2.CURRENT_CODE
        ELSE a.INV_ENTITY_CODE end AS INV_ENTITY_CODE,
INV_ENTITY_NAME,
START_DATE,
REVIEWED,
CREATED_BY,
CREATED_TIME,
UPDATED_BY,
UPDATED_TIME,
INV_ADJITEM_CODE,
SHARES_HOLD,
INV_ENTITY_CAPITAL,
RATIO_HOLD
FROM TRSDB.PRE_TRS_FACT_GROUP_INV_REL a
LEFT JOIN V_TRS_DIM_ENTITY_CUR t1 ON a.ENTITY_CODE = t1.ENTITY_CODE
LEFT JOIN V_TRS_DIM_ENTITY_CUR t2 ON a.INV_ENTITY_CODE = t2.ENTITY_CODE
),v2 AS (
SELECT a.*,
sum(1) over(PARTITION BY a.ENTITY_CODE , a.INV_ENTITY_CODE) as CNT,
sum(1) over(PARTITION BY a.ENTITY_CODE , a.INV_ENTITY_CODE order by a.START_DATE) as SEQ
FROM V1 a
)
--,v2 AS (
SELECT    
        a.ID,
        a.TYPE,
        a.ENTITY_CODE AS ENTITY_CODE,
        a.INV_ENTITY_CODE AS INV_ENTITY_CODE,
        a.INV_ENTITY_CAPITAL,
        a.SHARES_HOLD, 
        a.START_DATE,
        CASE WHEN a.CNT - a.SEQ = 0 THEN TO_DATE('2099/12/31 00:00:00', 'YYYY/MM/DD HH24:MI:SS')
        ELSE b.START_DATE-1 END AS END_DATE, 
        a.RATIO_HOLD,
        a.REVIEWED,
        a.INV_ADJITEM_CODE,
        a.CREATED_BY,
        a.CREATED_TIME,
        a.UPDATED_BY,
        a.UPDATED_TIME
FROM V2 a
LEFT JOIN V2 b ON a.ENTITY_CODE = b.ENTITY_CODE and a.INV_ENTITY_CODE = b.INV_ENTITY_CODE AND a.SEQ = b.SEQ-1
;

-- TRSDB.V_TRS_CFC_10Y_DEDUCTION_DETAIL source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_CFC_10Y_DEDUCTION_DETAIL" ("ENTITY_CODE", "CFC_ENTITY_CODE", "PERIOD", "SCENARIO", "DEDUCTED_YEAR", "PROFIT_AMT", "DEDUCTION", "FISCAL_YEAR", "LOSS", "CATEGORY") AS 
  WITH CTE AS(
SELECT 
	PERIOD,
	YYYY,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	EARNINGS_TAX,
	LOSS_TAX,
	EARNINGS_ASSESSMENT,
	LOSS_ASSESSMENT,
	APPROVAL
FROM V_TRS_FACT_CFC_10Y_LOSS_DEDUCTED
),CTE_VERSION AS (
SELECT DISTINCT 
	SCENARIO
FROM TRS_FACT_CFC_ENTITY_VERSION
)
,CTE_REC_LOSS AS (
SELECT
	t1.CFC_ENTITY_CODE,
	t2.SCENARIO,
	t1.DECLARE_DATE,
	t1.REC_YEAR,
	t1.AMOUNT
FROM V_TRS_FACT_CFC_RECOGNIZED_LOSS t1
CROSS JOIN CTE_VERSION t2
WHERE t1.SCENARIO = 'Per Audit' AND t1."TYPE" = 'CAP_RED' AND t1.REC_YEAR >= '2023' AND t1.DECLARE_DATE < TRUNC(SYSDATE, 'YYYY')
UNION ALL
SELECT 	
	t1.CFC_ENTITY_CODE,
	TO_NCHAR(t1.SCENARIO),
	t1.DECLARE_DATE,
	t1.REC_YEAR,
	t1.AMOUNT
FROM V_TRS_FACT_CFC_RECOGNIZED_LOSS t1
WHERE t1.DECLARE_DATE >= TRUNC(SYSDATE, 'YYYY') AND t1."TYPE" = 'CAP_RED' AND t1.REC_YEAR >= '2023'
)
,CTE1 AS (
SELECT 
	t1.PERIOD,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.SCENARIO ,
	t1.YYYY,
	(CASE WHEN (APPROVAL IS NULL OR APPROVAL = 'false' )AND EARNINGS_TAX IS NULL THEN LOSS_TAX * -1
	WHEN (APPROVAL IS NULL OR APPROVAL = 'false' ) AND EARNINGS_TAX IS NOT NULL THEN EARNINGS_TAX
	WHEN APPROVAL = 'true' AND EARNINGS_ASSESSMENT IS NULL THEN LOSS_ASSESSMENT * -1
	ELSE EARNINGS_ASSESSMENT END) AS AMT,
	'0' AS CATEGORY
	FROM CTE t1
UNION ALL
SELECT 
	DISTINCT 
	t1.PERIOD,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.SCENARIO,
	t2.DECLARE_DATE,
	t2.AMOUNT,
	'1' AS CATEGORY
FROM CTE t1
JOIN CTE_REC_LOSS t2 ON t2.DECLARE_DATE BETWEEN TRUNC(ADD_MONTHS(t1.PERIOD, -120), 'YYYY') AND t1.PERIOD
AND t1.CFC_ENTITY_CODE = t2.CFC_ENTITY_CODE AND t1.SCENARIO = t2.SCENARIO
),CTE2 AS (
SELECT 
	ROW_NUMBER() OVER(PARTITION BY PERIOD, SCENARIO, ENTITY_CODE, CFC_ENTITY_CODE ORDER BY YYYY) AS ID,
	PERIOD,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	SCENARIO,
	YYYY,
	AMT,
	CATEGORY
FROM CTE1
)
,CTE3 (ENTITY_CODE, CFC_ENTITY_CODE,PERIOD, SCENARIO, ID, YYYY,AMT,DEDUCTABLE_AMT,ACC_LOSS, CATEGORY) AS(
SELECT
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	PERIOD,
	SCENARIO,
	ID,
	YYYY,
	AMT,
	0 AS DEDUCTABLE_AMT,
	CASE WHEN AMT <0 THEN AMT*-1 ELSE 0 END AS ACC_LOSS,
	CATEGORY
FROM CTE2
WHERE ID = '1'
UNION ALL
SELECT 
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.PERIOD,
	t1.SCENARIO,
	t1.ID,
	t1.YYYY,
	t1.AMT,
	CASE WHEN t1.AMT >=0 AND t1.AMT<= t2.ACC_LOSS THEN t1.AMT
	    WHEN t1.AMT >=0 AND t1.AMT > t2.ACC_LOSS THEN t2.ACC_LOSS
	    ELSE 0
	    END AS DEDUCTABLE_AMT,
	CASE WHEN t1.AMT <0 THEN  t1.AMT*-1+t2.ACC_LOSS
        WHEN t1.AMT >=0 AND t1.AMT > t2.ACC_LOSS THEN 0
        WHEN t1.AMT >=0 AND t1.AMT <= t2.ACC_LOSS THEN t2.ACC_LOSS-t1.AMT
        END AS ACC_LOSS
    ,t1.CATEGORY
FROM CTE2 t1
JOIN CTE3 t2 ON t1.ID = t2.ID+1 AND t1.SCENARIO = t2.SCENARIO AND t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.CFC_ENTITY_CODE = t2.CFC_ENTITY_CODE  AND t1.PERIOD = t2.PERIOD
)
,LOSS AS(
SELECT 
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	PERIOD,
	SCENARIO,
	YYYY,
	AMT,
	SUM(AMT*-1) OVER (PARTITION BY PERIOD, ENTITY_CODE, CFC_ENTITY_CODE, SCENARIO ORDER BY YYYY)-AMT*-1 +1 AS STARTS,
	SUM(AMT*-1) OVER (PARTITION BY PERIOD, ENTITY_CODE, CFC_ENTITY_CODE, SCENARIO ORDER BY YYYY) AS ENDS
	,CATEGORY
	FROM CTE3
WHERE AMT<0
)
,PROFIT AS(
	SELECT 
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	PERIOD,
	SCENARIO,
	YYYY,
	AMT,
	SUM(DEDUCTABLE_AMT) OVER (PARTITION BY PERIOD, ENTITY_CODE, CFC_ENTITY_CODE, SCENARIO ORDER BY YYYY)-DEDUCTABLE_AMT +1 AS STARTS,
	SUM(DEDUCTABLE_AMT) OVER (PARTITION BY PERIOD, ENTITY_CODE, CFC_ENTITY_CODE, SCENARIO ORDER BY YYYY) AS ENDS
	,CATEGORY
	FROM CTE3
WHERE DEDUCTABLE_AMT>0
)
SELECT
	P.ENTITY_CODE,
	P.CFC_ENTITY_CODE,
	P.PERIOD,
	P.SCENARIO,
	P.YYYY AS DEDUCTED_YEAR,
	P.AMT AS PROFIT_AMT,
	CASE WHEN L.STARTS <= P.STARTS AND L.ENDS <= P.ENDS THEN L.ENDS-P.STARTS+1
    WHEN L.STARTS <= P.STARTS AND L.ENDS >= P.ENDS THEN P.ENDS-P.STARTS+1
    WHEN L.STARTS >= P.STARTS AND L.ENDS <= P.ENDS THEN L.ENDS-L.STARTS+1
    WHEN L.STARTS >= P.STARTS AND L.ENDS >= P.ENDS THEN P.ENDS-L.STARTS+1
    END AS DEDUCTION,
	L.YYYY AS FISCAL_YEAR,
	L.AMT AS LOSS
	,P.CATEGORY
FROM LOSS L
JOIN PROFIT P ON P.ENTITY_CODE = L.ENTITY_CODE AND P.CFC_ENTITY_CODE = L.CFC_ENTITY_CODE AND P.PERIOD = L.PERIOD AND P.SCENARIO = L.SCENARIO AND NOT ( L.ENDS < P.STARTS OR L.STARTS > P.ENDS)
;


-- TRSDB.V_TRS_CFC_10Y_DEDUCTION_RESULT source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_CFC_10Y_DEDUCTION_RESULT" ("PERIOD", "YYYY", "SCENARIO", "ENTITY_CODE", "CFC_ENTITY_CODE", "EARNINGS_TAX", "LOSS_TAX", "EARNINGS_ASSESSMENT", "LOSS_ASSESSMENT", "APPROVAL", "CATEGORY", "PAST_DEDUCTION", "THIS_DEDUCTION") AS 
  WITH CTE_PAST AS (
SELECT
	SUM(DEDUCTION) AS PAST_DEDUCTION,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	PERIOD,
	FISCAL_YEAR,
	CATEGORY
FROM V_TRS_CFC_10Y_DEDUCTION_DETAIL
WHERE TO_CHAR(PERIOD, 'YYYY') > TO_CHAR(DEDUCTED_YEAR, 'YYYY')
GROUP BY PERIOD, SCENARIO, ENTITY_CODE, CFC_ENTITY_CODE, FISCAL_YEAR, CATEGORY
),CTE_THIS_YEAR AS(
SELECT
	SUM(DEDUCTION) AS THIS_DEDUCTION,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	PERIOD,
	FISCAL_YEAR,
	CATEGORY
FROM V_TRS_CFC_10Y_DEDUCTION_DETAIL
WHERE TO_CHAR(PERIOD, 'YYYY') = TO_CHAR(DEDUCTED_YEAR, 'YYYY')
GROUP BY PERIOD, SCENARIO, ENTITY_CODE, CFC_ENTITY_CODE, FISCAL_YEAR, CATEGORY
)
SELECT
	t1."PERIOD",
	t1."YYYY",
	t1."SCENARIO",
	t1."ENTITY_CODE",
	t1."CFC_ENTITY_CODE",
	t1."EARNINGS_TAX",
	t1."LOSS_TAX",
	t1."EARNINGS_ASSESSMENT",
	t1."LOSS_ASSESSMENT",
	t1."APPROVAL",
	CASE WHEN t3.CATEGORY IS NOT NULL THEN t3.CATEGORY ELSE t2.CATEGORY END AS CATEGORY,
	t2.PAST_DEDUCTION,
	t3.THIS_DEDUCTION
FROM V_TRS_FACT_CFC_10Y_LOSS_DEDUCTED t1
LEFT JOIN CTE_PAST t2 ON t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.CFC_ENTITY_CODE = t2.CFC_ENTITY_CODE AND t1.PERIOD = t2.PERIOD AND t1.SCENARIO = t2.SCENARIO AND t1.YYYY = t2.FISCAL_YEAR
LEFT JOIN CTE_THIS_YEAR t3 ON t1.ENTITY_CODE = t3.ENTITY_CODE AND t1.CFC_ENTITY_CODE = t3.CFC_ENTITY_CODE AND t1.PERIOD = t3.PERIOD AND t1.SCENARIO = t3.SCENARIO AND t1.YYYY = t3.FISCAL_YEAR;

-- TRSDB.V_TRS_DATA_AUTHORIZATION source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DATA_AUTHORIZATION" ("USERNAME", "REALNAME", "COMPANY_DISPLAY", "COMP_ID", "ENTITY_DISPLAY", "ENT_ID", "POSITION_DISPLAY", "MODULE") AS 
  WITH DEPARTMENT AS(
SELECT
t1.id ,
t3.name AS company_display,
t2.name AS entity_display,
t1.name AS module_display
FROM FINEDB11.fine_department t1
JOIN FINEDB11.fine_department t2 ON t1.parentid = t2.id
JOIN FINEDB11.fine_department t3 ON t2.PARENTID  = t3.id
)
SELECT DISTINCT 
t1.username,
t1.realname,
t5.company_display,
t6.company_id AS comp_id,
t5.entity_display,
--t7.ENTITY_ID  AS ent_id,
t8.ENTITY_ID AS ent_id,
t4.name AS position_display,
t5.module_display AS module
FROM FINEDB11.fine_user t1
LEFT JOIN FINEDB11.fine_user_role_middle t2 ON t1.id = t2.userid
LEFT JOIN FINEDB11.fine_dep_role t3 ON t2.roleid = t3.id
LEFT JOIN FINEDB11.fine_post t4 ON t3.postid = t4.id
LEFT JOIN DEPARTMENT t5 ON t3.departmentid = t5.id
LEFT JOIN v_trs_dim_company t6 ON t6.company_display = t5.company_display AND t6.IS_ACTIVE = 'true'
LEFT JOIN v_trs_dim_entity t7 ON t7.entity_display = t5.entity_display AND t6.company_id = t7.company_id AND t7.LANGUAGE = t6.LANGUAGE AND t7.IS_ACTIVE = 'true'
LEFT JOIN v_trs_dim_entity t8 ON t7.entity_code = t8.current_code AND t7.LANGUAGE = t8.LANGUAGE 
WHERE t2.roletype=1
;


-- TRSDB.V_TRS_DATA_COUNTRY_REPORT source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DATA_COUNTRY_REPORT" ("ID", "PERIOD", "ENTITY_ID", "DATA_NAME", "VALUE", "UNIT", "SOURCE", "MEMO", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME") AS 
  WITH COUNTRY_REPORT AS(
SELECT ID, TO_DATE(PERIOD||'-12-31','YYYY-MM-DD') AS PERIOD , ENTITY_ID, DATA_NAME, TO_NUMBER(VALUE) AS VALUE, CREATED_BY, CREATED_TIME, UPDATED_BY, UPDATED_TIME
FROM TRSDB.TRS_FACT_COUNTRY_REPORT
WHERE REGEXP_LIKE(value, '^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$')
)
SELECT ID, PERIOD, ENTITY_ID, DATA_NAME, VALUE,NULL AS UNIT,TO_NCHAR('TRS_FACT_COUNTRY_REPORT') AS "SOURCE",NULL AS MEMO, CREATED_BY, CREATED_TIME, UPDATED_BY, UPDATED_TIME
FROM COUNTRY_REPORT;


-- TRSDB.V_TRS_DATA_COUNTRY_TAX_RESULT source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DATA_COUNTRY_TAX_RESULT" ("ID", "PERIOD", "ENTITY_ID", "DATA_NAME", "VALUE", "UNIT", "SOURCE", "MEMO", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME") AS 
  WITH COUNTRY_TAX_GEN_YEAR AS(
SELECT
	TO_CHAR(SYSDATE,'YYYY' )-5+rownum AS PERIOD
FROM dual
CONNECT BY rownum <= 6 /*滾動產生前四年+今年+後一年*/
),COUNTRY_TAX_TIME AS(
SELECT 
	CASE WHEN TO_CHAR(t.START_DATE,'YYYY')<=PERIOD and TO_CHAR(t.END_DATE,'YYYY')>=PERIOD THEN TO_DATE(PERIOD||'-12-31','YYYY-MM-DD') END PERIOD,--做成12/31才能跟年度任務關聯上
	t.COUNTRY_CODE,t.START_DATE ,t.END_DATE ,t.IS_LOWTAX ,t.TAX_RATE 
FROM V_TRS_FACT_COUNTRY_TAX t,COUNTRY_TAX_GEN_YEAR
WHERE PERIOD >2000
),COUNTRY_TAX_CR AS(
SELECT *
FROM COUNTRY_TAX_TIME
WHERE PERIOD IS NOT NULL
--ORDER BY COUNTRY_CODE,PERIOD
),COUNTRY_TAX_RESULT AS (
SELECT PERIOD ,t1.ENTITY_ID ,CASE t3.IS_LOWTAX WHEN 'true' THEN 1 ELSE 0 END AS IS_LOWTAX ,t3.TAX_RATE
FROM TRS_DIM_ENTITY t1
LEFT JOIN TRS_DIM_COUNTRY t2 ON t1.COUNTRY_ID =t2.COUNTRY_ID --AND t1.FR_LOCALE =t2.FR_LOCALE 
LEFT JOIN COUNTRY_TAX_CR t3 ON t2.COUNTRY_CODE = t3.COUNTRY_CODE
)---國別報告表
SELECT NULL AS ID, PERIOD,ENTITY_ID ,TO_NCHAR('是否為低稅地區') AS  DATA_NAME,IS_LOWTAX AS VALUE,NULL AS UNIT,TO_NCHAR('TRS_FACT_COUNTRY_TAX') AS "SOURCE",NULL AS MEMO, NULL AS CREATED_BY,NULL AS CREATED_TIME,NULL AS UPDATED_BY,NULL AS UPDATED_TIME 
FROM COUNTRY_TAX_RESULT
UNION ALL
SELECT NULL AS ID, PERIOD,ENTITY_ID ,TO_NCHAR('有效稅率') AS  DATA_NAME,TAX_RATE AS VALUE ,NULL AS UNIT,TO_NCHAR('TRS_FACT_COUNTRY_TAX') AS "SOURCE",NULL AS MEMO, NULL AS CREATED_BY,NULL AS CREATED_TIME,NULL AS UPDATED_BY,NULL AS UPDATED_TIME 
FROM COUNTRY_TAX_RESULT;




-- TRSDB.V_TRS_DIM_ACCOUNT source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_ACCOUNT" ("ACCOUNT_ID", "ACCOUNT_CODE", "PARENT_CODE", "IFRS_VERSION", "DEBIT_CREDIT", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "ACCOUNT_NAME", "ID", "LANGUAGE", "FR_LOCALE") AS 
  SELECT
	t1.ACCOUNT_ID ,
	t1.ACCOUNT_CODE ,
	t1.PARENT_CODE ,
	t1.IFRS_VERSION ,
	t1.DEBIT_CREDIT ,
	t1.CREATED_BY ,
	t1.CREATED_TIME ,
	t1.UPDATED_BY ,
	t1.UPDATED_TIME ,
	t2.ACCOUNT_NAME ,
	t2.ID ,
	t2."LANGUAGE" ,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_ACCOUNT t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON 1=1
    LEFT JOIN TRS_DIM_ACCOUNT_I18N t2  ON t1.ACCOUNT_ID  = t2.ACCOUNT_ID  AND t2."LANGUAGE" = t3.FR_LOCALE 	
;


-- TRSDB.V_TRS_DIM_ACCOUNTING_RANKING source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_ACCOUNTING_RANKING" ("T1_CODE", "T1_NAME", "T2_CODE", "T2_NAME", "T2_DEBIT_CREDIT", "T3_CODE", "T3_NAME", "T3_DEBIT_CREDIT", "T4_CODE", "T4_NAME", "T4_DEBIT_CREDIT", "T5_CODE", "T5_NAME", "T5_DEBIT_CREDIT", "T6_CODE", "T6_NAME", "T6_DEBIT_CREDIT", "T7_CODE", "T7_NAME", "T7_DEBIT_CREDIT", "IFRS_VERSION", "LANGUAGE") AS 
  WITH ACCOUNT AS(
SELECT
account_code ,
parent_code ,
account_name ,
DEBIT_CREDIT ,
IFRS_VERSION ,
language
FROM V_TRS_DIM_ACCOUNT 
WHERE 1=1
)
SELECT 
t1.ACCOUNT_CODE AS T1_CODE,
t1.account_name AS T1_NAME,
t2.ACCOUNT_CODE AS T2_CODE,
t2.account_name AS T2_NAME,
t2.debit_credit AS T2_DEBIT_CREDIT,
t3.ACCOUNT_CODE AS T3_CODE,
t3.account_name AS T3_NAME,
t3.debit_credit AS T3_DEBIT_CREDIT,
t4.ACCOUNT_CODE AS T4_CODE,
t4.account_name AS T4_NAME,
t4.debit_credit AS T4_DEBIT_CREDIT,
t5.ACCOUNT_CODE AS T5_CODE,
t5.account_name AS T5_NAME,
t5.debit_credit AS T5_DEBIT_CREDIT,
t6.ACCOUNT_CODE AS T6_CODE,
t6.account_name AS T6_NAME,
t6.debit_credit AS T6_DEBIT_CREDIT,
t7.ACCOUNT_CODE AS T7_CODE,
t7.account_name AS T7_NAME,
t7.debit_credit AS T7_DEBIT_CREDIT,
t1.IFRS_VERSION ,
t1.language 
FROM ACCOUNT t1
LEFT JOIN  ACCOUNT t2 ON t1.ACCOUNT_CODE =t2.parent_code AND t1.language =t2.language AND t1.IFRS_VERSION = t2.IFRS_VERSION
LEFT JOIN  ACCOUNT t3 ON t2.ACCOUNT_CODE =t3.parent_code AND t2.language =t3.language AND t2.IFRS_VERSION = t3.IFRS_VERSION
LEFT JOIN  ACCOUNT t4 ON t3.ACCOUNT_CODE =t4.parent_code AND t3.language =t4.language AND t3.IFRS_VERSION = t4.IFRS_VERSION
LEFT JOIN  ACCOUNT t5 ON t4.ACCOUNT_CODE =t5.parent_code AND t4.language =t5.language AND t4.IFRS_VERSION = t5.IFRS_VERSION
LEFT JOIN  ACCOUNT t6 ON t5.ACCOUNT_CODE =t6.parent_code AND t5.language =t6.language AND t5.IFRS_VERSION = t6.IFRS_VERSION
LEFT JOIN  ACCOUNT t7 ON t6.ACCOUNT_CODE =t7.parent_code AND t6.language =t7.language AND t6.IFRS_VERSION = t7.IFRS_VERSION
WHERE 1=1 
AND T1.ACCOUNT_CODE IN ('BS','PL')
AND t1.LANGUAGE IS NOT NULL;


-- TRSDB.V_TRS_DIM_COMPANY source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_COMPANY" ("COMPANY_ID", "COMPANY_CODE", "PRE_CODE", "CURRENT_CODE", "COMPANY_DISPLAY", "BUSINESS_TYPE", "INDUSTRY", "BUSINESS_STATUS", "START_DATE", "CANCELLATION_DATE", "COUNTRY_ID", "REGION_ID", "LEGAL_REPRESENTATIVE", "CONTACT_NUMBER", "REGISTRATION_DATE", "LOCAL_CURRENCY_ID", "IS_ACTIVE", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "ID", "ADDRESS", "REGISTRATION_ADDRESS", "COMPANY_NAME", "LANGUAGE", "FR_LOCALE") AS 
  WITH T_CURRENT AS(
	SELECT company_CODE ,CONNECT_BY_ROOT company_CODE AS current_code
	FROM TRS_DIM_COMPANY 
	START WITH company_code IN (SELECT COMPANY_CODE FROM TRS_DIM_COMPANY WHERE IS_ACTIVE = 'true')
	connect by prior pre_code = company_code 
)
  SELECT 
	t1.COMPANY_ID ,
	t1.COMPANY_CODE ,
	t1.PRE_CODE ,
	t4.CURRENT_CODE,
	t1.COMPANY_DISPLAY,
	t1.BUSINESS_TYPE ,
	t1.INDUSTRY ,
	t1.BUSINESS_STATUS ,
	t1.START_DATE ,
	t1.CANCELLATION_DATE ,
	t1.COUNTRY_ID ,
	t1.REGION_ID ,
	t1.LEGAL_REPRESENTATIVE ,
	t1.CONTACT_NUMBER ,
	t1.REGISTRATION_DATE ,
	t1.LOCAL_CURRENCY_ID ,
	t1.IS_ACTIVE ,
	t1.CREATED_BY ,
	t1.CREATED_TIME ,
	t1.UPDATED_BY ,
	t1.UPDATED_TIME ,
	t2.ID ,
	t2.ADDRESS ,
	t2.REGISTRATION_ADDRESS ,
	t2.COMPANY_NAME ,
	t2."LANGUAGE" ,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_COMPANY t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_COMPANY_I18N  t2  ON t1.COMPANY_ID  = t2.COMPANY_ID  AND t2."LANGUAGE" = t3.FR_LOCALE
    LEFT JOIN T_CURRENT t4 ON t1.COMPANY_CODE = t4.COMPANY_CODE
;


-- TRSDB.V_TRS_DIM_COMPANY_CUR source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_COMPANY_CUR" ("COMPANY_CODE", "CURRENT_CODE", "COUNTRY_ID", "LOCAL_CURRENCY_ID", "IS_ACTIVE", "SHOW") AS 
  SELECT 
	company_CODE ,
	CONNECT_BY_ROOT COMPANY_CODE AS CURRENT_CODE,
	COUNTRY_ID ,
	LOCAL_CURRENCY_ID ,
	IS_ACTIVE ,
	IS_ACTIVE AS SHOW
FROM TRS_DIM_COMPANY 
START WITH COMPANY_CODE IN (SELECT COMPANY_CODE FROM TRS_DIM_COMPANY WHERE IS_ACTIVE = 'true')
connect by prior PRE_CODE = COMPANY_CODE
UNION
SELECT
t1.COMPANY_CODE,
t1.COMPANY_CODE AS CURRENT_CODE,
t1.COUNTRY_ID,
t1.LOCAL_CURRENCY_ID,
t1.IS_ACTIVE,
'true' AS SHOW
FROM TRS_DIM_COMPANY t1
LEFT JOIN TRS_DIM_COMPANY t2 ON t2.PRE_CODE =t1.COMPANY_CODE
WHERE t1.IS_ACTIVE = 'false' AND t2.PRE_CODE IS NULL;


-- TRSDB.V_TRS_DIM_COUNTRY source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_COUNTRY" ("COUNTRY_ID", "COUNTRY_CODE", "COUNTRY_DISPLAY", "DEFAULT_CURRENCY_ID", "ID", "COUNTRY_NAME", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "LANGUAGE", "FR_LOCALE") AS 
  SELECT 
    t1.COUNTRY_ID ,
    t1.COUNTRY_CODE  ,
    t1.COUNTRY_DISPLAY,
    t1.DEFAULT_CURRENCY_ID ,
    t2.ID ,
    t2.COUNTRY_NAME ,
    t2.CREATED_BY ,
    t2.CREATED_TIME ,
    t2.UPDATED_BY ,
    t2.UPDATED_TIME ,
    t2.LANGUAGE,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_COUNTRY t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_COUNTRY_I18N t2  ON t1.COUNTRY_ID  = t2.COUNTRY_ID  AND t2."LANGUAGE" = t3.FR_LOCALE 	;


-- TRSDB.V_TRS_DIM_CURRENCY source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_CURRENCY" ("CURRENCY_ID", "CURRENCY_CODE", "ID", "CURRENCY_NAME", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "LANGUAGE", "FR_LOCALE") AS 
  SELECT 
    t1.CURRENCY_ID ,
	t1.CURRENCY_code,
    t2.ID,
	t2.CURRENCY_NAME,
    t2.CREATED_BY ,
    t2.CREATED_TIME ,
    t2.UPDATED_BY ,
    t2.UPDATED_TIME ,
    t2.LANGUAGE,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_CURRENCY t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_CURRENCY_I18N t2  ON t1.CURRENCY_ID  = t2.CURRENCY_ID  AND t2."LANGUAGE" = t3.FR_LOCALE 	
    ;


-- TRSDB.V_TRS_DIM_DEFAULT_TASK source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_DEFAULT_TASK" ("DEFAULT_TASK_ID", "TASK_CATEGORY_ID", "TASK_NAME_ID", "MODULE_ID", "TASK_RESULT_ID", "VALUE_TYPE_ID", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME") AS 
  SELECT 
	t1.default_task_id ,
	t1.task_category_id ,
	t1.task_name_id,
	t1.module_id,
	t2.task_result_id,
	t2.value_type_id,
	t2.created_by,
	t2.created_time,
	t2.updated_by,
	t2.updated_time
FROM 
	TRS_FACT_DEFAULT_TASK t1 
	JOIN TRS_DIM_TASK_VALUE t2 ON  t1.default_task_id = t2.task_id;


-- TRSDB.V_TRS_DIM_ENTITY source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_ENTITY" ("ENTITY_ID", "COMPANY_ID", "ENTITY_CODE", "PRE_CODE", "CURRENT_CODE", "ENTITY_DISPLAY", "ENTITY_TYPE_ID", "COUNTRY_ID", "REGION_ID", "CURRENCY_ID", "SALES_FUNCTION_ID", "PLI", "IS_ACTIVE", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "ENTITY_NAME", "ID", "LANGUAGE", "FR_LOCALE") AS 
  WITH T_CURRENT AS(
	SELECT ENTITY_CODE ,CONNECT_BY_ROOT ENTITY_CODE AS current_code
	FROM TRS_DIM_ENTITY 
	START WITH ENTITY_code IN (SELECT ENTITY_CODE FROM TRS_DIM_ENTITY WHERE IS_ACTIVE = 'true')
	connect by prior pre_code = ENTITY_code 
) 
SELECT
	t1.ENTITY_ID ,
	t1.COMPANY_ID ,
	t1.ENTITY_CODE ,
	t1.PRE_CODE ,
	t4.CURRENT_CODE,
	t1.ENTITY_DISPLAY,
	t1.ENTITY_TYPE_ID ,
	t1.COUNTRY_ID ,
	t1.REGION_ID ,
	t1.CURRENCY_ID ,
	t1.SALES_FUNCTION_ID ,
	t1.PLI ,
	t1.IS_ACTIVE ,
	t1.CREATED_BY ,
	t1.CREATED_TIME ,
	t1.UPDATED_BY ,
	t1.UPDATED_TIME ,
	t2.ENTITY_NAME ,
	t2.ID ,
	t2."LANGUAGE" ,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_ENTITY t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_ENTITY_I18N t2  ON t1.ENTITY_ID  = t2.ENTITY_ID  AND t2."LANGUAGE" = t3.FR_LOCALE
    LEFT JOIN T_CURRENT t4 ON t1.ENTITY_CODE = t4.ENTITY_CODE
;


-- TRSDB.V_TRS_DIM_ENTITY_CUR source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_ENTITY_CUR" ("ENTITY_CODE", "CURRENT_CODE", "COUNTRY_ID", "CURRENCY_ID", "IS_ACTIVE", "SHOW", "ENTITY_TYPE_ID") AS 
  SELECT 
	ENTITY_CODE,
	CONNECT_BY_ROOT ENTITY_CODE AS current_code,
	COUNTRY_ID,
	CURRENCY_ID,
	IS_ACTIVE,
	IS_ACTIVE AS SHOW,
	ENTITY_TYPE_ID
FROM TRS_DIM_ENTITY 
START WITH ENTITY_CODE IN (SELECT ENTITY_CODE FROM TRS_DIM_ENTITY WHERE IS_ACTIVE = 'true')
connect by prior pre_code = ENTITY_code 
UNION
SELECT
t1.ENTITY_CODE,
t1.ENTITY_CODE AS CURRENT_CODE,
t1.COUNTRY_ID,
t1.CURRENCY_ID,
t1.IS_ACTIVE,
'true' AS SHOW,
t1.ENTITY_TYPE_ID
FROM TRS_DIM_ENTITY t1
LEFT JOIN TRS_DIM_ENTITY t2 ON t2.PRE_CODE =t1.ENTITY_CODE
WHERE t1.IS_ACTIVE = 'false' AND t2.PRE_CODE IS NULL
UNION ALL 
--加入權益法公司
SELECT 
ENTITY_CODE,
ENTITY_CODE AS CURRENT_CODE,
CAST(COUNTRY_CODE AS VARCHAR2(36)) AS COUNTRY_ID, 
LOCAL_CURRENCY AS CURRENCY_ID,
'true' AS IS_ACTIVE,
'true' AS SHOW,
'003' AS ENTITY_TYPE_ID
FROM TRS_DIM_EQUITY_INV_LIST;


-- TRSDB.V_TRS_DIM_ENTITY_TYPE source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_ENTITY_TYPE" ("ENTITY_TYPE_ID", "KEY_NAME", "ID", "ENTITY_TYPE_NAME", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "LANGUAGE", "FR_LOCALE") AS 
  SELECT 
    t1.entity_type_ID ,
	t1.key_name ,
	t2.ID,
	t2.entity_type_NAME,
    t2.CREATED_BY ,
    t2.CREATED_TIME ,
    t2.UPDATED_BY ,
    t2.UPDATED_TIME ,
    t2.LANGUAGE,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_entity_type t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_entity_type_I18N t2  ON t1.entity_type_ID  = t2.entity_type_ID  AND t2."LANGUAGE" = t3.FR_LOCALE
    ;




-- TRSDB.V_TRS_DIM_INV_ADJITEM source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_INV_ADJITEM" ("SERIAL_NO", "INV_ADJITEM_ID", "INV_ADJITEM_CODE", "ADD_LESS", "AUTO_CAL", "ID", "INV_ADJITEM_NAME", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "LANGUAGE", "FR_LOCALE") AS 
  SELECT 
    t1.SERIAL_NO,
	t1.INV_ADJITEM_ID ,
	t1.INV_ADJITEM_code,
	t1.ADD_LESS,
	t1.AUTO_CAL,
    t2.ID,
	t2.INV_ADJITEM_NAME,
    t2.CREATED_BY ,
    t2.CREATED_TIME ,
    t2.UPDATED_BY ,
    t2.UPDATED_TIME ,
    t2.LANGUAGE,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_INV_ADJITEM t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_INV_ADJITEM_I18N t2  ON t1.INV_ADJITEM_ID  = t2.INV_ADJITEM_ID  AND t2."LANGUAGE" = t3.FR_LOCALE 	
    ;

-- TRSDB.V_TRS_DIM_REGION source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_REGION" ("REGION_ID", "REGION_CODE", "COUNTRY_ID", "ID", "REGION_NAME", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "LANGUAGE", "FR_LOCALE") AS 
  SELECT 
    t1.REGION_ID ,
	t1.region_code,
    t1.COUNTRY_ID,
    t2.ID,

	t2.REGION_NAME,
    t2.CREATED_BY ,
    t2.CREATED_TIME ,
    t2.UPDATED_BY ,
    t2.UPDATED_TIME ,
    t2.LANGUAGE,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_REGION t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_REGION_I18N t2  ON t1.REGION_ID  = t2.REGION_ID  AND t2."LANGUAGE" = t3.FR_LOCALE 		
	
	
;


-- TRSDB.V_TRS_DIM_RISK_INDICATOR source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_RISK_INDICATOR" ("RISK_INDICATOR_ID", "ENTITY_TYPE_ID", "TASK_FREQUENCY_ID", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "LINK", "ID", "RISK_INDICATOR_NAME", "FUNCTION", "SCENARIO", "RISK_INDICATOR_CATEGORY", "DESCRIPTION", "IS_CONDITION", "LANGUAGE", "FR_LOCALE") AS 
  SELECT 
	t1.RISK_INDICATOR_ID ,
	t1.ENTITY_TYPE_ID ,
	t1.TASK_FREQUENCY_ID ,
	t1.CREATED_BY ,
	t1.CREATED_TIME ,
	t1.UPDATED_BY ,
	t1.UPDATED_TIME ,
	t1.link,
	t2.ID ,
	t2.RISK_INDICATOR_NAME ,
	t2."FUNCTION" ,
	t2.SCENARIO ,
	t2.RISK_INDICATOR_CATEGORY ,
	t2.DESCRIPTION ,
	t1.IS_CONDITION ,
	t2."LANGUAGE" ,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_RISK_INDICATOR t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE = 'true'
    LEFT JOIN TRS_DIM_RISK_INDICATOR_I18N t2  ON t1.RISK_INDICATOR_ID  = t2.RISK_INDICATOR_ID  AND t2."LANGUAGE" = t3.FR_LOCALE;


-- TRSDB.V_TRS_DIM_SALES_FUNCTION source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_SALES_FUNCTION" ("SALES_FUNCTION_ID", "KEY_NAME", "ID", "SALES_FUNCTION_NAME", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "LANGUAGE", "FR_LOCALE") AS 
  SELECT 
    t1.SALES_FUNCTION_ID ,
	t1.KEY_NAME ,
	t2.ID,
	t2.SALES_FUNCTION_NAME,
    t2.CREATED_BY ,
    t2.CREATED_TIME ,
    t2.UPDATED_BY ,
    t2.UPDATED_TIME ,
    t2.LANGUAGE,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_SALES_FUNCTION t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_SALES_FUNCTION_I18N t2  ON t1.SALES_FUNCTION_ID  = t2.SALES_FUNCTION_ID  AND t2."LANGUAGE" = t3.FR_LOCALE;


-- TRSDB.V_TRS_DIM_STATUS source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_STATUS" ("CODE_ID", "STATUS_ID", "STATUS_CODE", "STATUS_KEY", "MODULE_ID", "STATUS_DESCRIPTION", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "STATUS_NAME", "ID", "LANGUAGE", "FR_LOCALE") AS 
  SELECT
  	t1.ID AS CODE_ID,
	t1.STATUS_ID ,
	t1.STATUS_CODE ,
	t1.STATUS_KEY ,
	t1.MODULE_ID ,
	t1.STATUS_DESCRIPTION ,
	t1.CREATED_BY ,
	t1.CREATED_TIME ,
	t1.UPDATED_BY ,
	t1.UPDATED_TIME ,
	t2.STATUS_NAME ,
	t2.ID ,
	t2."LANGUAGE" ,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_STATUS t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_STATUS_I18N t2  ON t1.STATUS_ID  = t2.STATUS_ID  AND t2."LANGUAGE" = t3.FR_LOCALE ;


-- TRSDB.V_TRS_DIM_TAG source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_TAG" ("TAG_ID", "TAG_KEY", "MODULE_ID", "TAG_DESCRIPTION", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "TAG_NAME", "ID", "LANGUAGE", "FR_LOCALE") AS 
  SELECT
	t1.TAG_ID ,
	t1.TAG_KEY ,
	t1.MODULE_ID ,
	t1.TAG_DESCRIPTION ,
	t1.CREATED_BY ,
	t1.CREATED_TIME ,
	t1.UPDATED_BY ,
	t1.UPDATED_TIME ,
	t2.TAG_NAME ,
	t2.ID ,
	t2."LANGUAGE" ,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_TAG t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_TAG_I18N t2  ON t1.TAG_ID  = t2.TAG_ID  AND t2."LANGUAGE" = t3.FR_LOCALE;


-- TRSDB.V_TRS_DIM_TASK_CATEGORY source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_TASK_CATEGORY" ("TASK_CATEGORY_ID", "KEY_NAME", "ID", "TASK_CATEGORY_NAME", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "LANGUAGE", "FR_LOCALE") AS 
  SELECT 
    t1.TASK_CATEGORY_ID ,
	t1.KEY_NAME ,
    t2.ID,
	t2.TASK_CATEGORY_NAME,
    t2.CREATED_BY ,
    t2.CREATED_TIME ,
    t2.UPDATED_BY ,
    t2.UPDATED_TIME ,
    t2.LANGUAGE,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_TASK_CATEGORY t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_TASK_CATEGORY_I18N t2  ON t1.TASK_CATEGORY_ID  = t2.TASK_CATEGORY_ID  AND t2."LANGUAGE" = t3.FR_LOCALE
    ;

-- TRSDB.V_TRS_DIM_TASK_FREQUENCY source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_TASK_FREQUENCY" ("TASK_FREQUENCY_ID", "FREQUENCY_CODE", "DATE_FORMAT", "PERIOD", "START_DATE", "END_DATE", "MONTH", "MEMO", "ID", "FREQUENCY_NAME", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "LANGUAGE", "FR_LOCALE") AS 
  SELECT 
    t1.TASK_FREQUENCY_ID ,
	t1.FREQUENCY_CODE ,
	t1.date_format,
	t1.period,
	t1.start_date ,
	t1.end_date,
	t1.month,
	t1.memo,
	t2.ID,
	t2.FREQUENCY_NAME ,
    t2.CREATED_BY ,
    t2.CREATED_TIME ,
    t2.UPDATED_BY ,
    t2.UPDATED_TIME ,
    t2.LANGUAGE,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_TASK_FREQUENCY t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_TASK_FREQUENCY_I18N t2  ON t1.TASK_FREQUENCY_ID  = t2.TASK_FREQUENCY_ID  AND t2."LANGUAGE" = t3.FR_LOCALE;


-- TRSDB.V_TRS_DIM_TASK_NAME source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_TASK_NAME" ("TASK_NAME_ID", "KEY_NAME", "ID", "TASK_NAME", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "LANGUAGE", "FR_LOCALE") AS 
  SELECT 
    t1.TASK_NAME_ID ,
	t1.KEY_NAME ,
    t2.ID,
	t2.TASK_NAME,
    t2.CREATED_BY ,
    t2.CREATED_TIME ,
    t2.UPDATED_BY ,
    t2.UPDATED_TIME ,
    t2.LANGUAGE,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_TASK_NAME t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_TASK_NAME_I18N t2  ON t1.TASK_NAME_ID  = t2.TASK_NAME_ID  AND t2."LANGUAGE" = t3.FR_LOCALE
    ;


-- TRSDB.V_TRS_DIM_VALUE_TYPE source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_DIM_VALUE_TYPE" ("VALUE_TYPE_ID", "KEY_NAME", "MODULE_ID", "MEMO", "ID", "VALUE_TYPE_NAME", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "LANGUAGE", "FR_LOCALE") AS 
  SELECT 
    t1.VALUE_TYPE_ID ,
	t1.KEY_NAME ,
	t1.module_id,
    t1.memo,
	t2.ID,
	t2.VALUE_TYPE_NAME,
    t2.CREATED_BY ,
    t2.CREATED_TIME ,
    t2.UPDATED_BY ,
    t2.UPDATED_TIME ,
    t2.LANGUAGE,
    t3.FR_LOCALE 
FROM 
    TRS_DIM_VALUE_TYPE t1
    JOIN TRS_DIM_SYSTEM_LANG t3  ON t3.IS_ACTIVE ='true'
    LEFT JOIN TRS_DIM_VALUE_TYPE_I18N t2  ON t1.VALUE_TYPE_ID  = t2.VALUE_TYPE_ID  AND t2."LANGUAGE" = t3.FR_LOCALE;


-- TRSDB.V_TRS_FACT_CFC_10Y_LOSS_DEDUCTED source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_10Y_LOSS_DEDUCTED" ("PERIOD", "YYYY", "SCENARIO", "ENTITY_CODE", "CFC_ENTITY_CODE", "EARNINGS_TAX", "LOSS_TAX", "EARNINGS_ASSESSMENT", "LOSS_ASSESSMENT", "APPROVAL") AS 
  WITH CTE_INCOME AS(
 SELECT 
	t1.PERIOD,
	t1.SCENARIO,
	t1.ENTITY_CODE,
	t1.INV_ENTITY_CODE AS CFC_ENTITY_CODE,
	CASE WHEN t1.CFC_EARNINGS >= 0 THEN t1.CFC_EARNINGS ELSE NULL END AS EARNINGS_TAX,
	CASE WHEN t1.CFC_EARNINGS < 0 THEN t1.CFC_EARNINGS * -1 ELSE NULL END AS LOSS_TAX,
	CASE WHEN GAIN_LOSS = 'EARN' THEN t2.AMOUNT ELSE NULL END AS EARNINGS_ASSESSMENT,
	CASE WHEN GAIN_LOSS = 'LOSS' THEN t2.AMOUNT ELSE NULL END AS LOSS_ASSESSMENT,
	t3.APPROVAL
FROM V_TRS_FACT_CFC_TAX_INCOME t1 --申報數
LEFT JOIN V_TRS_FACT_CFC_APPROVAL_DETAIL t2 ON TO_CHAR(t1.PERIOD, 'YYYY') = t2.YEAR AND t1.SCENARIO = t2.SCENARIO AND t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.INV_ENTITY_CODE = t2.INV_ENTITY_CODE
LEFT JOIN V_TRS_FACT_CFC_APPROVAL t3 ON TO_CHAR(t1.PERIOD, 'YYYY-MM-DD') = (t3.YEAR || '-12-31') AND t1.ENTITY_CODE = t3.ENTITY_CODE AND t1.SCENARIO = t3.SCENARIO
)
,CTE_PERIOD AS(
SELECT DISTINCT 
	PERIOD
FROM TRS_FACT_CFC_ENTITY_VERSION
WHERE TO_CHAR(PERIOD, 'YYYY') >= '2023'
),CTE_VERSION AS (
SELECT DISTINCT 
	SCENARIO
FROM TRS_FACT_CFC_ENTITY_VERSION
),CTE_HEAD AS (
SELECT DISTINCT
	PERIOD,
	SCENARIO
FROM TRS_FACT_CFC_ENTITY_VERSION
),CTE0 AS (
SELECT
	t1.PERIOD,
	t2.SCENARIO,
	t1.ENTITY_CODE,
	CFC_ENTITY_CODE,
	EARNINGS_TAX,
	LOSS_TAX,
	EARNINGS_ASSESSMENT,
	LOSS_ASSESSMENT,
	APPROVAL
FROM CTE_INCOME t1
CROSS JOIN CTE_VERSION t2
WHERE t1.SCENARIO = 'Per Audit' AND TO_CHAR(t1.PERIOD, 'MM-DD') = '12-31'
)
SELECT
	t1.PERIOD,
	t2.PERIOD AS YYYY,
	t1.SCENARIO,
	t2.ENTITY_CODE,
	CFC_ENTITY_CODE,
	EARNINGS_TAX,
	LOSS_TAX,
	EARNINGS_ASSESSMENT,
	LOSS_ASSESSMENT,
	APPROVAL
FROM CTE_HEAD t1
JOIN CTE0 t2 ON t1.PERIOD > t2.PERIOD AND t1.SCENARIO  = t2.SCENARIO
UNION ALL
SELECT 
t1.PERIOD,
t2.PERIOD AS YYYY,
t2.SCENARIO,
t2.ENTITY_CODE,
CFC_ENTITY_CODE,
EARNINGS_TAX,
LOSS_TAX,
EARNINGS_ASSESSMENT,
LOSS_ASSESSMENT,
APPROVAL
FROM CTE_PERIOD t1
JOIN CTE_INCOME t2 ON t1.PERIOD = t2.PERIOD;


-- TRSDB.V_TRS_FACT_CFC_APPROVAL source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_APPROVAL" ("ID", "YEAR", "ENTITY_CODE", "APPROVAL", "ATTACHMENT", "FILENAME", "SCENARIO") AS 
  SELECT 
	T1.ID,
	T1.YEAR,
	T2.CURRENT_CODE AS ENTITY_CODE ,
	T1.APPROVAL ,
	T1.ATTACHMENT ,
	T1.FILENAME ,
	T1.SCENARIO 
FROM TRS_FACT_CFC_APPROVAL T1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.ENTITY_CODE = T2.ENTITY_CODE  ;


-- TRSDB.V_TRS_FACT_CFC_APPROVAL_DETAIL source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_APPROVAL_DETAIL" ("ID", "YEAR", "ENTITY_CODE", "INV_ENTITY_CODE", "GAIN_LOSS", "SCENARIO", "AMOUNT") AS 
  SELECT 
	T1.ID,
	T1.YEAR,
	T2.CURRENT_CODE AS ENTITY_CODE ,
	T3.CURRENT_CODE AS INV_ENTITY_CODE,
	T1.GAIN_LOSS  ,
	T1.SCENARIO  ,
	T1.AMOUNT 
FROM TRS_FACT_CFC_APPROVAL_DETAIL T1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.ENTITY_CODE = T2.ENTITY_CODE
LEFT JOIN V_TRS_DIM_ENTITY_CUR T3 ON T1.INV_ENTITY_CODE = T3.ENTITY_CODE;


-- TRSDB.V_TRS_FACT_CFC_ATTACHMENT source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_ATTACHMENT" ("ID", "PERIOD", "SCENARIO", "ENTITY_CODE", "INV_ENTITY_CODE", "ATTACHMENT", "ATTCHMENT_TYPE", "FILENAME", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME") AS 
  SELECT
	T1.ID,
	T1.PERIOD,
	T1.SCENARIO,
	T2.CURRENT_CODE AS ENTITY_CODE,
	T3.CURRENT_CODE AS INV_ENTITY_CODE,
	T1.ATTACHMENT ,
	T1.ATTCHMENT_TYPE ,
	T1.FILENAME ,
	T1.CREATED_BY ,
	T1.CREATED_TIME ,
	T1.UPDATED_BY ,
	T1.UPDATED_TIME 
FROM TRS_FACT_CFC_ATTACHMENT T1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.ENTITY_CODE = T2.ENTITY_CODE
LEFT JOIN V_TRS_DIM_ENTITY_CUR T3 ON T1.INV_ENTITY_CODE = T3.ENTITY_CODE;


-- TRSDB.V_TRS_FACT_CFC_DIVIDEND source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_DIVIDEND" ("ID", "PERIOD", "ENTITY_CODE", "CFC_ENTITY_CODE", "SCENARIO", "CURRENCY_ID", "DECLARATION_DATE", "FISCAL_YEAR", "CHINA_DIVIDEND_PROFIT", "CHINA_PAID_TAX_NTD11", "NON_CHINA_DIVIDEND_PROFIT", "NON_CHINA_PAID_TAX", "RATIO_HOLD", "AVG_EXCHANGE_RATIO", "EXCHANGE_RATE_DATE", "EXCHANGE_RATE_PAY", "L_EXCHANGE_RATE_DATE", "L_EXCHANGE_RATE_PAY", "NON_CHINA_DIVIDEND_PROFIT_NTD6", "NON_CHINA_PAID_TAX_NTD10", "CHINA_DIVIDEND_PROFIT_NTD7") AS 
  WITH CTE_PERIOD AS (
SELECT
	PERIOD,
	SCENARIO,
	ENTITY_CODE
FROM V_TRS_FACT_CFC_ENTITY_VERSION
),DIVIDEND AS(
SELECT
ID,
--ENTITY_CODE,
t2.CURRENT_CODE AS ENTITY_CODE,--用current_code輸出
--CFC_ENTITY_CODE,
t3.CURRENT_CODE AS CFC_ENTITY_CODE,--用current_code輸出
SCENARIO,
t1.CURRENCY_ID,
DECLARATION_DATE,
FISCAL_YEAR,
CHINA_DIVIDEND_PROFIT,
CHINA_PAID_TAX_NTD,
NON_CHINA_DIVIDEND_PROFIT ,
NON_CHINA_PAID_TAX,
CREATED_BY,
CREATED_TIME,
UPDATED_BY,
UPDATED_TIME,
EXCHANGE_RATE_DATE,
EXCHANGE_RATE_PAY
FROM TRS_FACT_CFC_DIVIDEND t1
LEFT JOIN V_TRS_DIM_ENTITY_CUR t2 ON t1.ENTITY_CODE = t2.ENTITY_CODE
LEFT JOIN V_TRS_DIM_ENTITY_CUR t3 ON t1.CFC_ENTITY_CODE = t3.ENTITY_CODE
),ORD AS(
SELECT
	T1.PERIOD,
	T1.SCENARIO,
	T2.CFC_ENTITY_CODE,
	T2.DECLARATION_DATE,
	T2.EXCHANGE_RATE_DATE,
	T2.EXCHANGE_RATE_PAY,
	RANK() OVER(PARTITION BY PERIOD, T2.SCENARIO, CFC_ENTITY_CODE ORDER BY DECLARATION_DATE DESC) AS RK
FROM CTE_PERIOD T1
JOIN DIVIDEND T2 ON T2.DECLARATION_DATE BETWEEN TRUNC(T1.PERIOD, 'YEAR') AND T1.PERIOD AND T1.ENTITY_CODE = T2.CFC_ENTITY_CODE AND T1.SCENARIO = T2.SCENARIO
),CTE_LATEST_EXCHANGE AS (
SELECT
	PERIOD,
	SCENARIO,
	CFC_ENTITY_CODE,
	EXCHANGE_RATE_DATE,
	EXCHANGE_RATE_PAY
FROM ORD WHERE RK = 1
),GROUP_INV_REL AS(
SELECT 
--ENTITY_CODE,
t2.CURRENT_CODE AS ENTITY_CODE,--用current_code輸出
--INV_ENTITY_CODE,
t3.CURRENT_CODE AS INV_ENTITY_CODE,--用current_code輸出
START_DATE,
END_DATE,
RATIO_HOLD
FROM TRS_FACT_GROUP_INV_REL t1 
LEFT JOIN V_TRS_DIM_ENTITY_CUR t2 ON t1.ENTITY_CODE = t2.ENTITY_CODE
LEFT JOIN V_TRS_DIM_ENTITY_CUR t3 ON t1.INV_ENTITY_CODE = t3.ENTITY_CODE
)
SELECT
	t1.ID,
	t0.PERIOD,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t0.SCENARIO,
	t1.CURRENCY_ID,
	t1.DECLARATION_DATE,
	t1.FISCAL_YEAR,
	t1.CHINA_DIVIDEND_PROFIT,
	t1.CHINA_PAID_TAX_NTD AS CHINA_PAID_TAX_NTD11,
	t1.NON_CHINA_DIVIDEND_PROFIT,
	t1.NON_CHINA_PAID_TAX,
	t2.RATIO_HOLD,
	CASE WHEN t1.FISCAL_YEAR = TO_CHAR(t0.PERIOD, 'YYYY') THEN t3.AVG_EXCHANGE_RATIO ELSE t5.AVG_EXCHANGE_RATIO END AS AVG_EXCHANGE_RATIO,
	t1.EXCHANGE_RATE_DATE,
	t1.EXCHANGE_RATE_PAY,
	t4.EXCHANGE_RATE_DATE AS L_EXCHANGE_RATE_DATE,
	t4.EXCHANGE_RATE_PAY AS L_EXCHANGE_RATE_PAY,
	TRUNC(NVL(t1.NON_CHINA_DIVIDEND_PROFIT, 0) * t2.RATIO_HOLD * CASE WHEN t1.FISCAL_YEAR = TO_CHAR(t0.PERIOD, 'YYYY') THEN t3.AVG_EXCHANGE_RATIO ELSE t5.AVG_EXCHANGE_RATIO END, 0) AS NON_CHINA_DIVIDEND_PROFIT_NTD6,
	TRUNC(NVL(t1.NON_CHINA_PAID_TAX, 0) * t2.RATIO_HOLD * t1.EXCHANGE_RATE_PAY, 0)AS NON_CHINA_PAID_TAX_NTD10,
	TRUNC(NVL(t1.CHINA_DIVIDEND_PROFIT, 0) * t2.RATIO_HOLD * CASE WHEN t1.FISCAL_YEAR = TO_CHAR(t0.PERIOD, 'YYYY') THEN t3.AVG_EXCHANGE_RATIO ELSE t5.AVG_EXCHANGE_RATIO END, 0)AS CHINA_DIVIDEND_PROFIT_NTD7
FROM CTE_PERIOD t0
JOIN DIVIDEND t1 ON t1.DECLARATION_DATE BETWEEN TRUNC(t0.PERIOD, 'YEAR') AND t0.PERIOD AND t0.ENTITY_CODE = t1.CFC_ENTITY_CODE AND t0.SCENARIO = t1.SCENARIO
LEFT JOIN GROUP_INV_REL t2 ON t1.CFC_ENTITY_CODE = t2.INV_ENTITY_CODE AND t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.DECLARATION_DATE BETWEEN t2.START_DATE AND t2.END_DATE
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t3 ON t1.CURRENCY_ID = t3.CURRENCY_ID AND t3.TARGET_CURRENCY_ID = 'NTD' AND t1.SCENARIO = t3.SCENARIO AND TO_CHAR(t0.PERIOD, 'YYYY-MM') = t3.PERIOD
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t5 ON t1.CURRENCY_ID = t5.CURRENCY_ID AND t5.TARGET_CURRENCY_ID = 'NTD' AND t1.SCENARIO = t5.SCENARIO AND t1.FISCAL_YEAR || '-12' = t5.PERIOD
LEFT JOIN CTE_LATEST_EXCHANGE t4 ON t0.PERIOD = t4.PERIOD AND t0.SCENARIO = t4.SCENARIO AND t0.ENTITY_CODE = t4.CFC_ENTITY_CODE;


-- TRSDB.V_TRS_FACT_CFC_ENTITY_VERSION source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_ENTITY_VERSION" ("ID", "PERIOD", "ENTITY_CODE", "SCENARIO", "CREATED_TIME") AS 
  SELECT DISTINCT 
	t1.ID,
	t1.PERIOD,
	--t1.ENTITY_CODE,
	t2.CURRENT_CODE AS ENTITY_CODE,
	t1.SCENARIO,
	t1.CREATED_TIME
FROM TRS_FACT_CFC_ENTITY_VERSION t1
LEFT JOIN V_TRS_DIM_ENTITY_CUR t2 ON t1.ENTITY_CODE = t2.ENTITY_CODE;


-- TRSDB.V_TRS_FACT_CFC_EXEMPTION source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_EXEMPTION" ("ID", "PERIOD", "ENTITY_CODE", "INV_ENTITY_CODE", "RATIO_SUM", "RATIO_DIRECT", "RATIO_INDIRECT", "UPDATED_TIME", "FIXED_PLACE", "NUM_OF_EMPLOYEES", "SALARY", "FINANCIAL_REPORT", "FIXED_PLACE_ATTACH", "FIXED_PLACE_ATTACH_NAME", "EMPLOYEE_ATTACH", "EMPLOYEE_ATTACH_NAME", "ATTACH1", "ATTACH1_NAME", "ATTACH2", "ATTACH2_NAME", "ATTACH3", "ATTACH3_NAME", "COUNTRY_ID", "LOCAL_CURRENCY_ID", "IS_LOWTAX", "SCENARIO", "PASSIVE_RATIO_TOTAL", "SUB_OPE_EXEMPTION", "ACTUAL_CONTROL", "IS_CFC") AS 
  WITH CTE_PERIOD AS (
	SELECT
		t1.PERIOD,
		t1.ENTITY_CODE,
		t1.SCENARIO,
		t2.COUNTRY_ID AS COMPANY_COUNTRY
	FROM V_TRS_FACT_CFC_ENTITY_VERSION t1
	JOIN TRS_DIM_ENTITY t2 ON t1.ENTITY_CODE = t2.ENTITY_CODE  AND t2.COUNTRY_ID = 'TW'
 )
 ,CTE AS (
--從MVIEW取薪資相關費用
SELECT
	T1.PERIOD || '-' || LPAD(T1.MONTH, 2, 0) AS PERIOD,
	T1.CURRENT_CODE AS ENTITY_CODE,
    T1.SCENARIO,
	T1.T4_CODE AS ACCOUNT_CODE,
	T1.T4_NAME AS NAME,
	T1.T4_DEBIT_CREDIT AS DEBIT_CREDIT,
	SUM(NVL(ACCUMULATED_AMOUNT, 0) * T3.AVG_EXCHANGE_RATIO) AS SALARY
FROM MV_TRS_TB_ACTUAL_ACCOUNT_AMOUNT T1
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW T3 ON (T1.PERIOD || '-' || LPAD(T1.MONTH,2,0)) = T3.PERIOD AND T1.CURRENCY_CODE = T3.CURRENCY_ID AND TARGET_CURRENCY_ID = 'NTD' AND T1.SCENARIO = T3.SCENARIO 
WHERE 
	T1.T4_CODE IN ('5113', '5145', '5146', '5147' ,'6110', '6210','6310','6128','6228', '6328','6145','6245','6353','6146','6246','6354','6236','6317')
GROUP BY T1.PERIOD || '-' || LPAD(T1.MONTH, 2, 0),
T1.CURRENT_CODE, T1.SCENARIO, T1.T4_CODE, T1.T4_NAME, T1.T4_DEBIT_CREDIT
), CTE_INV_CONTROL AS (
SELECT
	T1.ID,
	T1.PERIOD,
	T2.CURRENT_CODE AS ENTITY_CODE,
	T3.CURRENT_CODE AS INV_ENTITY_CODE,
	t1.RATIO_SUM,
	t1.RATIO_DIRECT,
	t1.RATIO_INDIRECT,
	t1.UPDATED_TIME
FROM TRS_FACT_INV_CONTROL T1
JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.ENTITY_CODE = T2.ENTITY_CODE
JOIN V_TRS_DIM_ENTITY_CUR T3 ON T1.INV_ENTITY_CODE = T3.ENTITY_CODE
WHERE RATIO_DIRECT != 0
),CTE_INFO AS (
SELECT
	t2.PERIOD ,
	t1.CURRENT_CODE AS CFC_ENTITY_CODE ,
	t2.SCENARIO ,
	t2.ID,
	t2.FIXED_PLACE,
	t2.NUM_OF_EMPLOYEES,
	t2.FINANCIAL_REPORT,
	t2.FIXED_PLACE_ATTACH,
	t2.FIXED_PLACE_ATTACH_NAME,
	t2.EMPLOYEE_ATTACH,
	t2.EMPLOYEE_ATTACH_NAME,
	t2.ATTACH1,
	t2.ATTACH1_NAME,
	t2.ATTACH2,
	t2.ATTACH2_NAME,
	t2.ATTACH3,
	t2.ATTACH3_NAME
FROM TRS_FACT_CFC_INFO T2
LEFT JOIN V_TRS_DIM_ENTITY_CUR T1 ON T2.CFC_ENTITY_CODE = ENTITY_CODE
),CTE_CONTROL AS (
SELECT
T1.PERIOD ,
T1.SCENARIO,
T2.CURRENT_CODE AS ENTITY_CODE ,
T3.CURRENT_CODE AS INV_ENTITY_CODE ,
T1.ACTUAL_CONTROL
FROM TRS_FACT_INV_ACTUAL_CONTROL T1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.ENTITY_CODE = T2.ENTITY_CODE 
LEFT JOIN V_TRS_DIM_ENTITY_CUR T3 ON T1.INV_ENTITY_CODE = T3.ENTITY_CODE 
)
SELECT 
	t2.ID,
	t0.PERIOD,
	t0.ENTITY_CODE,
	t1.INV_ENTITY_CODE,
--	t3.COMPANY_NAME,
	t1.RATIO_SUM,
	t1.RATIO_DIRECT,
	t1.RATIO_INDIRECT,
	t1.UPDATED_TIME,
	t2.FIXED_PLACE,
	t2.NUM_OF_EMPLOYEES,
	CTE.SALARY,
	t2.FINANCIAL_REPORT,
	t2.FIXED_PLACE_ATTACH,
	t2.FIXED_PLACE_ATTACH_NAME,
	t2.EMPLOYEE_ATTACH,
	t2.EMPLOYEE_ATTACH_NAME,
	t2.ATTACH1,
	t2.ATTACH1_NAME,
	t2.ATTACH2,
	t2.ATTACH2_NAME,
	t2.ATTACH3,
	t2.ATTACH3_NAME,
	t3.COUNTRY_ID,
	t3.LOCAL_CURRENCY_ID,
	t4.IS_LOWTAX,
	t0.SCENARIO,
	t5.PASSIVE_RATIO_TOTAL,
--	t3.ADDRESS,
	CASE WHEN t2.FIXED_PLACE = 'true' AND t2.NUM_OF_EMPLOYEES > 0 AND t5.PASSIVE_RATIO_TOTAL < 0.1 THEN 'true' ELSE 'false' END AS SUB_OPE_EXEMPTION,
	t7.ACTUAL_CONTROL,
	CASE WHEN t1.RATIO_SUM >= 0.5 OR t7.ACTUAL_CONTROL = 'true' THEN 'true' ELSE 'false' END AS IS_CFC
FROM CTE_PERIOD t0
LEFT JOIN CTE_INV_CONTROL t1 ON t0.PERIOD = t1.PERIOD AND t0.ENTITY_CODE = t1.ENTITY_CODE 
LEFT JOIN CTE_INFO t2 ON t1.PERIOD = t2.PERIOD AND t1.INV_ENTITY_CODE = t2.CFC_ENTITY_CODE AND t0.SCENARIO = t2.SCENARIO
LEFT JOIN TRS_DIM_COMPANY t3 ON t1.INV_ENTITY_CODE = t3.COMPANY_CODE 
JOIN TRS_FACT_COUNTRY_TAX t4 ON t3.COUNTRY_ID = t4.COUNTRY_CODE AND t4.IS_LOWTAX = 'true' AND T1.PERIOD BETWEEN T4.START_DATE AND T4.END_DATE 
LEFT JOIN V_TRS_FACT_PASSIVE_INCOME_TOTAL t5 ON t0.PERIOD = t5.PERIOD AND t0.ENTITY_CODE = t5.ENTITY_CODE AND t1.INV_ENTITY_CODE = t5.INV_ENTITY_CODE AND t0.SCENARIO = t5.SCENARIO
LEFT JOIN CTE ON t1.INV_ENTITY_CODE = CTE.ENTITY_CODE AND TO_CHAR(t0.PERIOD, 'YYYY-MM') = CTE.PERIOD AND t5.SCENARIO = CTE.SCENARIO 
LEFT JOIN CTE_CONTROL t7 ON t1.ENTITY_CODE = t7.ENTITY_CODE AND t1.PERIOD = t7.PERIOD AND t1.INV_ENTITY_CODE = t7.INV_ENTITY_CODE AND t0.SCENARIO = t7.SCENARIO;


-- TRSDB.V_TRS_FACT_CFC_INV_DIVIDEND source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_INV_DIVIDEND" ("ID", "CFC_ENTITY_CODE", "PERIOD", "SCENARIO", "CFC_INV_ENTITY_CODE", "COUNTRY_ID", "DIVIDEND_TYPE", "DECLARATION_DATE", "FISCAL_YEAR", "AMOUNT", "DEDUCTABLE_TAX", "CREATED_TIME", "IS_LOWTAX", "RATIO_HOLD", "AMOUNT_DIFF_ADJ", "TAX_CREDIT_DIFF_ADJ", "AMOUNT_BEFORE_ADJ", "AMOUNT_TOTAL", "TAX_CREDIT_BEFORD_ADJ", "TAX_CREDIT_TOTAL", "CURRENCY_ID", "AVG_EXCHANGE_RATIO", "CURRENCY_TAX", "EXCHANGE_RATE_TAX") AS 
  WITH DIVIDEND AS(
	SELECT
	t1.ID,
	t2.CURRENT_CODE AS CFC_ENTITY_CODE,--用current_code輸出
	t3.CURRENT_CODE AS CFC_INV_ENTITY_CODE,--用current_code輸出
	SCENARIO,
	DIVIDEND_TYPE,
	DECLARATION_DATE,
	FISCAL_YEAR,
	CREATED_BY,
	CREATED_TIME,
	UPDATED_BY,
	UPDATED_TIME,
	PERIOD,
	t1.CURRENCY_ID,
	AMOUNT,
	DEDUCTABLE_TAX,
	AMOUNT_DIFF_ADJ,
	TAX_CREDIT_DIFF_ADJ,
	RATIO_HOLD,
	CURRENCY_TAX,
	EXCHANGE_RATE_TAX
	FROM TRS_FACT_CFC_INV_DIVIDEND t1
	LEFT JOIN V_TRS_DIM_ENTITY_CUR t2 ON t1.CFC_ENTITY_CODE = t2.ENTITY_CODE
	LEFT JOIN V_TRS_DIM_ENTITY_CUR t3 ON t1.CFC_INV_ENTITY_CODE = t3.ENTITY_CODE
)
SELECT
        t4.ID,
        t1.ENTITY_CODE AS CFC_ENTITY_CODE,
        --t2.ENTITY_DISPLAY,
        t1.PERIOD,
        t1.SCENARIO,
        t4.CFC_INV_ENTITY_CODE,
        t2.COUNTRY_ID,
--        t2.CURRENT_CODE AS INV_CURRENT_CODE,
        t4.DIVIDEND_TYPE,
        t4.DECLARATION_DATE,
        t4.FISCAL_YEAR,
        t4.AMOUNT,
        t4.DEDUCTABLE_TAX,
        t4.CREATED_TIME,
        t3.IS_LOWTAX,
        t4.RATIO_HOLD,
        --t2.LANGUAGE,
        t4.AMOUNT_DIFF_ADJ,
        t4.TAX_CREDIT_DIFF_ADJ,
        TRUNC(t4.AMOUNT * t4.RATIO_HOLD * t5.AVG_EXCHANGE_RATIO, 0) AS AMOUNT_BEFORE_ADJ,
        TRUNC((t4.AMOUNT * t4.RATIO_HOLD * t5.AVG_EXCHANGE_RATIO) + NVL(AMOUNT_DIFF_ADJ, 0), 0) AS AMOUNT_TOTAL,
        TRUNC(t4.DEDUCTABLE_TAX * t4.RATIO_HOLD * t4.EXCHANGE_RATE_TAX, 0) AS TAX_CREDIT_BEFORD_ADJ,
        TRUNC((t4.DEDUCTABLE_TAX * t4.RATIO_HOLD * t4.EXCHANGE_RATE_TAX) + NVL(t4.TAX_CREDIT_DIFF_ADJ, 0), 0) AS TAX_CREDIT_TOTAL,
        t4.CURRENCY_ID,
        t5.AVG_EXCHANGE_RATIO,
--        t6.CURRENT_CODE AS CFC_CURRENT_CODE,
        t4.CURRENCY_TAX,
        t4.EXCHANGE_RATE_TAX
FROM V_TRS_FACT_CFC_ENTITY_VERSION t1
JOIN DIVIDEND t4 ON  t1.ENTITY_CODE = t4.CFC_ENTITY_CODE AND t1.SCENARIO = t4.SCENARIO AND t4.DECLARATION_DATE BETWEEN TRUNC(t1.PERIOD, 'YEAR') AND t1.PERIOD
LEFT JOIN TRS_DIM_ENTITY t2 ON t4.CFC_INV_ENTITY_CODE = t2.ENTITY_CODE --AND ENTITY_TYPE_ID = '003'  AND t2."LANGUAGE" IS NOT NULL
LEFT JOIN TRS_FACT_COUNTRY_TAX t3 ON t2.COUNTRY_ID = t3.COUNTRY_CODE AND T1.PERIOD BETWEEN T3.START_DATE AND T3.END_DATE
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t5 ON t4.CURRENCY_ID = t5.CURRENCY_ID AND t5.TARGET_CURRENCY_ID = 'NTD' AND TO_CHAR(t1.PERIOD, 'YYYY-MM') = t5.PERIOD AND t1.SCENARIO = t5.SCENARIO
;


-- TRSDB.V_TRS_FACT_CFC_INV_INCOME source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_INV_INCOME" ("PERIOD", "REC_YEAR", "ENTITY_CODE", "CFC_ENTITY_CODE", "SCENARIO", "FISCAL_YEAR", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10", "E11", "E12", "AVG_EXCHANGE_RATIO", "L_EXCHANGE_RATE_DATE", "DIVIDEND6", "DIVIDEND7") AS 
  WITH CTE_VERSION AS (
SELECT DISTINCT
	SCENARIO
FROM TRS_FACT_CFC_ENTITY_VERSION
),CTE_HEAD AS (
SELECT DISTINCT
	PERIOD,
	SCENARIO,
	ENTITY_CODE
FROM V_TRS_FACT_CFC_ENTITY_VERSION
),CTE_PERIOD AS (
SELECT DISTINCT
	PERIOD
FROM TRS_FACT_CFC_ENTITY_VERSION
), CTE_THIS_YEAR AS(
SELECT
	SUM(DEDUCTION) AS DEDUCTION,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	PERIOD,
	FISCAL_YEAR
FROM V_TRS_CFC_10Y_DEDUCTION_DETAIL
WHERE TRUNC(PERIOD, 'YYYY') = TRUNC(DEDUCTED_YEAR, 'YYYY')
GROUP BY PERIOD, SCENARIO, ENTITY_CODE, CFC_ENTITY_CODE, FISCAL_YEAR
)
,PROFIT000 AS (
SELECT
	t1.PERIOD,
	t1.SCENARIO,
	t1.ENTITY_CODE,
	t1.INV_ENTITY_CODE AS CFC_ENTITY_CODE,
	CASE WHEN t3.APPROVAL = 'true' AND t2.GAIN_LOSS = 'EARN' THEN t2.AMOUNT
	WHEN t3.APPROVAL = 'true' AND t2.GAIN_LOSS = 'LOSS' THEN t2.AMOUNT * -1
	ELSE t1.CFC_EARNINGS END AS CFC_EARNINGS,
	'PROFIT' AS DATA_TYPE,
	t1.AVG_RATIO_HOLD,
	CASE WHEN SUM(t1.CFC_EARNINGS) OVER(PARTITION BY t1.PERIOD, t1.SCENARIO, t1.ENTITY_CODE) >= 7000000 AND CFC_EARNINGS >= 0 THEN 'true'
	WHEN CFC_EARNINGS >= 7000000 THEN 'true' 
	WHEN ( CASE WHEN MONTHS_BETWEEN(t1.PERIOD, t4.START_DATE) + 1 < 12 AND TRUNC(SYSDATE, 'YYYY') > t4.START_DATE THEN CFC_EARNINGS * 12 / MONTHS_BETWEEN(t1.PERIOD, TRUNC(SYSDATE, 'YYYY')) +1 
	ELSE CFC_EARNINGS * 12 / MONTHS_BETWEEN(t1.PERIOD, t4.START_DATE) + 1 END) > 7000000 THEN 'true' --小於一年判斷是否從今年初計算全年
	ELSE 'false' END AS IS_TAX
FROM V_TRS_FACT_CFC_TAX_INCOME t1
LEFT JOIN V_TRS_FACT_CFC_APPROVAL_DETAIL t2 ON TO_CHAR(t1.PERIOD, 'YYYY') = t2.YEAR AND t1.SCENARIO = t2.SCENARIO AND t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.INV_ENTITY_CODE = t2.INV_ENTITY_CODE
LEFT JOIN V_TRS_FACT_CFC_APPROVAL t3 ON TO_CHAR(t1.PERIOD, 'YYYY-MM-DD') = (t3.YEAR || '-12-31') AND t1.ENTITY_CODE = t3.ENTITY_CODE AND t1.SCENARIO = t3.SCENARIO
LEFT JOIN TRS_DIM_COMPANY t4 ON t1.INV_ENTITY_CODE = t4.COMPANY_CODE AND t4.START_DATE < t1.PERIOD
WHERE CFC_EARNINGS > 0 AND SUB_OPE_EXEMPTION = 'false' --非實質營運才參與計算
),PROFIT00 AS (
SELECT
	t1.PERIOD,
	t1.SCENARIO,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.CFC_EARNINGS,
	t1.DATA_TYPE,
	t1.AVG_RATIO_HOLD
FROM PROFIT000 t1
WHERE IS_TAX = 'true'
), CTE_LIMIT AS (
--	自”限制分配狀況”頁面取數，加總金額；若該CFC為實質營運，則顯示空白
	SELECT
		t1.PERIOD,
		t1.SCENARIO,
		t1.ENTITY_CODE AS CFC_ENTITY_CODE,
		NVL(SUM(t1.AMOUNT), 0) AS LIMIT_ITEMS
	FROM V_TRS_FACT_CFC_RESTRICTED_DISTRIBUTION t1
	WHERE 1 = 1
		AND ITEM != 'SPECIAL_RESERVE_NREGU'
		AND TO_CHAR(t1.PERIOD, 'YYYY') = t1.ORIGIN_YEAR
	GROUP BY t1.PERIOD, t1.SCENARIO, t1.ENTITY_CODE
)
,PROFIT0 AS (
SELECT
	t1.PERIOD,
	t1.SCENARIO,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.DATA_TYPE,
	(t1.CFC_EARNINGS - NVL(t4.DEDUCTION, 0) - NVL(t2.LIMIT_ITEMS, 0)) * t1.AVG_RATIO_HOLD AS CFC_EARNINGS 
FROM PROFIT00 t1
LEFT JOIN CTE_THIS_YEAR t4 ON t1.PERIOD = t4.PERIOD AND t1.SCENARIO = t4.SCENARIO AND t1.ENTITY_CODE = t4.ENTITY_CODE AND t1.CFC_ENTITY_CODE = t4.CFC_ENTITY_CODE
LEFT JOIN CTE_LIMIT T2 ON T1.SCENARIO = T2.SCENARIO AND T1.CFC_ENTITY_CODE = T2.CFC_ENTITY_CODE AND T1.PERIOD = T2.PERIOD
)
,CTE_PA AS (
SELECT
	t1.PERIOD,
	t2.SCENARIO,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.CFC_EARNINGS,
	t1.DATA_TYPE
FROM PROFIT0 t1
CROSS JOIN CTE_VERSION t2
WHERE t1.SCENARIO = 'Per Audit' AND TO_CHAR(t1.PERIOD, 'MM-DD') = '12-31'
),PROFIT AS (
SELECT
	t1.PERIOD,
	t2.PERIOD AS PERIOD1,
	t2.SCENARIO,
	t1.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,
	t2.CFC_EARNINGS,
	t2.DATA_TYPE
FROM CTE_HEAD t1
JOIN CTE_PA t2 ON t1.PERIOD > t2.PERIOD AND t1.SCENARIO = t2.SCENARIO AND t1.ENTITY_CODE = t2.ENTITY_CODE
WHERE ROWNUM <= 1000000
UNION ALL
SELECT
	t1.PERIOD,
	t2.PERIOD AS PERIOD1,
	t2.SCENARIO,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,
	t2.CFC_EARNINGS,
	t2.DATA_TYPE
FROM CTE_PERIOD t1
JOIN PROFIT0 t2 ON t1.PERIOD = t2.PERIOD
WHERE ROWNUM <= 1000000
),CTE_DIVIDEND_CUR AS (
SELECT
	t1.FISCAL_YEAR,
	t2.CURRENT_CODE AS ENTITY_CODE,
	t3.CURRENT_CODE AS CFC_ENTITY_CODE,
	t1.CURRENCY_ID,
	t1.SCENARIO,
	t1.DECLARATION_DATE,
	t1.NON_CHINA_DIVIDEND_PROFIT,
	t1.CHINA_DIVIDEND_PROFIT
FROM TRS_FACT_CFC_DIVIDEND T1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.ENTITY_CODE = T2.ENTITY_CODE 
LEFT JOIN V_TRS_DIM_ENTITY_CUR T3 ON T1.CFC_ENTITY_CODE = T3.ENTITY_CODE 
)
, CTE_DIVIDEND1 AS (
SELECT
	t2.FISCAL_YEAR,
	t1.period,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,
	t2.CURRENCY_ID,
	t1.SCENARIO,
	t2.DECLARATION_DATE,
	t2.NON_CHINA_DIVIDEND_PROFIT,
	t2.CHINA_DIVIDEND_PROFIT
FROM CTE_HEAD t1
LEFT JOIN CTE_DIVIDEND_CUR t2 ON t1.ENTITY_CODE = t2.ENTITY_CODE
WHERE t2.SCENARIO = 'Per Audit' AND t2.DECLARATION_DATE < TRUNC(t1.period, 'YYYY')
UNION ALL
SELECT
	t2.FISCAL_YEAR,
	t1.period,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,
	t2.CURRENCY_ID,
	t1.SCENARIO,
	t2.DECLARATION_DATE,
	t2.NON_CHINA_DIVIDEND_PROFIT,
	t2.CHINA_DIVIDEND_PROFIT
FROM CTE_HEAD t1
LEFT JOIN CTE_DIVIDEND_CUR t2 ON t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.SCENARIO = t2.SCENARIO
WHERE  t2.DECLARATION_DATE BETWEEN TRUNC(t1.period, 'YYYY') AND t1.period
)
/*, CTE_DIVIDEND1 AS (
SELECT
	t1.PERIOD,
	t2.DECLARATION_DATE ,
	t1.SCENARIO,
	t2.CURRENCY_ID,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,
	t2.DECLARATION_DATE,
	t2.FISCAL_YEAR,
	t2.NON_CHINA_DIVIDEND_PROFIT,
	t2.CHINA_DIVIDEND_PROFIT
FROM CTE_HEAD t1
JOIN CTE_DIVIDEND0 t2 ON t1.PERIOD > t2.DECLARATION_DATE AND t1.SCENARIO = t2.SCENARIO AND t1.ENTITY_CODE = t2.CFC_ENTITY_CODE
UNION ALL
SELECT
	t1.PERIOD,
	t2.DECLARATION_DATE AS PERIOD1,
	t2.SCENARIO,
	t2.CURRENCY_ID,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,
	t2.DECLARATION_DATE,
	t2.FISCAL_YEAR,
	t2.NON_CHINA_DIVIDEND_PROFIT,
	t2.CHINA_DIVIDEND_PROFIT
FROM CTE_PERIOD t1
JOIN CTE_DIVIDEND0 t2 ON t1.PERIOD = t2.DECLARATION_DATE
)*/--SELECT * FROM CTE_DIVIDEND1
,DIVIDEND AS (
SELECT
	t1.PERIOD,
	t1.DECLARATION_DATE AS PERIOD1,
	t1.DECLARATION_DATE,
	t1.SCENARIO,
	t1.FISCAL_YEAR,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.NON_CHINA_DIVIDEND_PROFIT * t2.RATIO_HOLD * 	CASE WHEN t1.DECLARATION_DATE<= TRUNC(SYSDATE,'YYYY') THEN t5.AVG_EXCHANGE_RATIO
	WHEN TO_CHAR(t1.PERIOD, 'YYYY') > t1.FISCAL_YEAR THEN t3.AVG_EXCHANGE_RATIO ELSE t4.AVG_EXCHANGE_RATIO END AS DIVIDEND,
	'DIVIDEND' AS DATA_TYPE,
	'0' AS CHINA
FROM CTE_DIVIDEND1 t1
LEFT JOIN TRS_FACT_GROUP_INV_REL t2 ON t1.CFC_ENTITY_CODE = t2.INV_ENTITY_CODE AND t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.DECLARATION_DATE BETWEEN t2.START_DATE AND t2.END_DATE
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t3 ON t1.CURRENCY_ID = t3.CURRENCY_ID AND t3.TARGET_CURRENCY_ID = 'NTD' AND t1.SCENARIO = t3.SCENARIO AND t1.FISCAL_YEAR || '-12' = t3.PERIOD
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t4 ON t1.CURRENCY_ID = t4.CURRENCY_ID AND t4.TARGET_CURRENCY_ID = 'NTD' AND t1.SCENARIO = t4.SCENARIO AND TO_CHAR(t1.PERIOD, 'YYYY-MM') = t4.PERIOD
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t5 ON t1.CURRENCY_ID = t5.CURRENCY_ID AND t5.TARGET_CURRENCY_ID = 'NTD' AND t5.SCENARIO = 'Per Audit' AND t1.FISCAL_YEAR || '-12' = t5.PERIOD
WHERE NON_CHINA_DIVIDEND_PROFIT IS NOT NULL AND NON_CHINA_DIVIDEND_PROFIT > 0
UNION ALL
SELECT
	t1.PERIOD,
	t1.DECLARATION_DATE AS PERIOD1,
	t1.DECLARATION_DATE,
	t1.SCENARIO,
	t1.FISCAL_YEAR,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.CHINA_DIVIDEND_PROFIT * t2.RATIO_HOLD * CASE WHEN t1.DECLARATION_DATE<= TRUNC(SYSDATE,'YYYY') THEN t5.AVG_EXCHANGE_RATIO
	WHEN TO_CHAR(t1.PERIOD, 'YYYY') > t1.FISCAL_YEAR THEN t3.AVG_EXCHANGE_RATIO ELSE t4.AVG_EXCHANGE_RATIO END AS DIVIDEND,
	'DIVIDEND' AS DATA_TYPE,
	'1' AS CHINA
FROM CTE_DIVIDEND1 t1
LEFT JOIN TRS_FACT_GROUP_INV_REL t2 ON t1.CFC_ENTITY_CODE = t2.INV_ENTITY_CODE AND t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.DECLARATION_DATE BETWEEN t2.START_DATE AND t2.END_DATE
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t3 ON t1.CURRENCY_ID = t3.CURRENCY_ID AND t3.TARGET_CURRENCY_ID = 'NTD' AND t1.SCENARIO = t3.SCENARIO AND t1.FISCAL_YEAR || '-12' = t3.PERIOD
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t4 ON t1.CURRENCY_ID = t4.CURRENCY_ID AND t4.TARGET_CURRENCY_ID = 'NTD' AND t1.SCENARIO = t4.SCENARIO AND TO_CHAR(t1.PERIOD, 'YYYY-MM') = t4.PERIOD
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t5 ON t1.CURRENCY_ID = t5.CURRENCY_ID AND t5.TARGET_CURRENCY_ID = 'NTD' AND t5.SCENARIO = 'Per Audit' AND t1.FISCAL_YEAR || '-12' = t5.PERIOD
WHERE CHINA_DIVIDEND_PROFIT IS NOT NULL AND CHINA_DIVIDEND_PROFIT > 0
)--SELECT * FROM DIVIDEND
,SECURITY_CUR AS(
SELECT 
t1.INV_SECURITY_CODE,
t2.CURRENT_CODE
FROM TRS_DIM_INV_SECURITY t1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.CORR_COMPANY_ID = T2.ENTITY_CODE
),CTE_INV_DETAIL AS (
SELECT
	T1.PERIOD,
	T2.CURRENT_CODE AS ENTITY_CODE,
	NVL(T3.CURRENT_CODE, t1.INV_SECURITY_CODE) AS INV_SECURITY_CODE,
	INV_ADJITEM_CODE,
	SHARE_QTY
FROM TRS_FACT_INV_DETAIL T1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.ENTITY_CODE = T2.ENTITY_CODE
LEFT JOIN SECURITY_CUR T3 ON T1.INV_SECURITY_CODE = T3.INV_SECURITY_CODE
)
,SHARES AS (
SELECT
	PERIOD,
	ENTITY_CODE,
	INV_SECURITY_CODE AS CFC_ENTITY_CODE,
	INV_ADJITEM_CODE,
	SHARE_QTY,
	'SHARES' AS DATA_TYPE
FROM CTE_INV_DETAIL
),SHARE_ORD AS(
	SELECT 
	ROW_NUMBER()OVER(PARTITION BY ENTITY_CODE,CFC_ENTITY_CODE ORDER BY PERIOD) AS ORDERS,
	PERIOD, ENTITY_CODE, CFC_ENTITY_CODE, INV_ADJITEM_CODE, SHARE_QTY, DATA_TYPE
	FROM SHARES
),SHARE_CHANGE(ORDERS, PERIOD, ENTITY_CODE,CFC_ENTITY_CODE,SHARE_QTY,ACC_SHARES,CHANGES,INV_ADJITEM_CODE, DATA_TYPE) AS(
SELECT 
	ORDERS,
	PERIOD, ENTITY_CODE,CFC_ENTITY_CODE,SHARE_QTY,
	0+SHARE_QTY AS ACC_SHARES,
	NULL AS CHANGES,
	INV_ADJITEM_CODE,
	DATA_TYPE
FROM SHARE_ORD 
WHERE ORDERS = 1
UNION ALL
SELECT 
	t.ORDERS,
	t.PERIOD, t.ENTITY_CODE,t.CFC_ENTITY_CODE,t.SHARE_QTY,
	t.SHARE_QTY+SHARE_CHANGE.ACC_SHARES AS ACC_SHARES,
	CASE WHEN SHARE_CHANGE.ACC_SHARES IS NULL OR SHARE_CHANGE.ACC_SHARES = 0 THEN 0 ELSE t.SHARE_QTY/SHARE_CHANGE.ACC_SHARES END AS CHANGES,
	t.INV_ADJITEM_CODE,
	t.DATA_TYPE
FROM SHARE_ORD t
JOIN SHARE_CHANGE ON t.ORDERS = SHARE_CHANGE.orders+1 AND t.ENTITY_CODE = SHARE_CHANGE.ENTITY_CODE AND t.CFC_ENTITY_CODE = SHARE_CHANGE.CFC_ENTITY_CODE
)
, SHARE_PERC AS (
SELECT
--	t2.ORDERS,
	t1.PERIOD,
	t2.PERIOD AS PERIOD1,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,SHARE_QTY,
	t2.ACC_SHARES,
	t2.CHANGES, 
	t2.INV_ADJITEM_CODE,
	t2.DATA_TYPE
FROM CTE_PERIOD t1
LEFT JOIN SHARE_CHANGE t2 ON t1.PERIOD > t2.PERIOD
WHERE CHANGES<0 AND t2.INV_ADJITEM_CODE LIKE 'disposed_%'
UNION ALL
SELECT
--	t2.ORDERS,
	t1.PERIOD,
	t2.PERIOD AS PERIOD1,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,SHARE_QTY,
	t2.ACC_SHARES,
	t2.CHANGES, 
	t2.INV_ADJITEM_CODE,
	t2.DATA_TYPE
FROM CTE_PERIOD t1
LEFT JOIN SHARE_CHANGE t2 ON t1.PERIOD = t2.PERIOD
WHERE CHANGES<0 AND INV_ADJITEM_CODE LIKE 'disposed_%'
), SHARE_PERC1 AS (
SELECT
	T1.PERIOD,
	T1.SCENARIO,
	t2.PERIOD1,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,SHARE_QTY,
	t2.ACC_SHARES,
	t2.CHANGES, 
	t2.INV_ADJITEM_CODE,
	t2.DATA_TYPE
FROM CTE_HEAD T1
JOIN SHARE_PERC T2 ON T1.PERIOD = T2.PERIOD AND T1.ENTITY_CODE = T2.ENTITY_CODE
)--SELECT * FROM SHARE_PERC1
,FISCAL_YEAR AS(
SELECT DISTINCT 
	
	TO_CHAR(PERIOD1,'yyyy') AS FISCAL_YEAR
FROM PROFIT
WHERE CFC_EARNINGS > 0
),T AS(
SELECT 
	FISCAL_YEAR,
	t2.PERIOD,
	t2.PERIOD1,
	TO_CHAR(T1.SCENARIO) AS SCENARIO,
	TO_CHAR(ENTITY_CODE) AS ENTITY_CODE,
	TO_CHAR(CFC_ENTITY_CODE) AS CFC_ENTITY_CODE,
	NULL AS AMOUNT,
	CHANGES,
	t2.DATA_TYPE,
	NULL AS CHINA
FROM FISCAL_YEAR t1
JOIN SHARE_PERC1 t2 ON t1.PERIOD = t2.PERIOD AND t2.PERIOD IS NOT NULL AND T1.SCENARIO = T2.SCENARIO
--
UNION ALL 
SELECT 
	TO_CHAR(PERIOD1,'yyyy') AS FISCAL_YEAR,
	PERIOD,
	PERIOD1,
	TO_CHAR(SCENARIO) AS SCENARIO,
	TO_CHAR(ENTITY_CODE),
	TO_CHAR(CFC_ENTITY_CODE),
	CFC_EARNINGS AS AMOUNT,
	NULL AS DELTA_CHANGE,
	DATA_TYPE,
	NULL AS CHINA
FROM PROFIT
--
UNION ALL
SELECT
	FISCAL_YEAR,
	PERIOD,
	PERIOD1,
	TO_CHAR(SCENARIO),
	TO_CHAR(ENTITY_CODE),
	TO_CHAR(CFC_ENTITY_CODE),
	DIVIDEND*-1 AS DIVIDEND,
	NULL AS DELTA_CHANGE,
	DATA_TYPE,
	CHINA
FROM DIVIDEND
)--SELECT * FROM T
,T_ORDER AS(
SELECT 
	ROW_NUMBER()OVER(PARTITION BY PERIOD, ENTITY_CODE,CFC_ENTITY_CODE,SCENARIO, FISCAL_YEAR ORDER BY PERIOD1) AS ORDERS,
	FISCAL_YEAR,
	PERIOD,
	PERIOD1,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	AMOUNT,
	CHANGES,
	DATA_TYPE,
	CHINA
FROM T
)--SELECT * FROM T_ORDER WHERE TO_CHAR(PERIOD, 'YYYY-MM-DD') = '2024-06-30' AND SCENARIO = 'Per Audit' AND CFC_ENTITY_CODE = 'P00013_BVI' 
,DETAILS(ORDERS,FISCAL_YEAR,PERIOD,PERIOD1,SCENARIO,ENTITY_CODE,CFC_ENTITY_CODE,AMOUNT,CHANGES,AMOUNT_CHANGES,ACC_AMOUNT, DATA_TYPE, CHINA, E2) AS(
SELECT 
	ORDERS,
	FISCAL_YEAR,
	PERIOD,
	PERIOD1,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	AMOUNT,
	CHANGES,
	NVL(AMOUNT,0) AS AMOUNT_CHANGES,
	NVL(AMOUNT,0) AS ACC_AMOUNT,
	DATA_TYPE,
	CHINA,
	AMOUNT AS E2
FROM T_ORDER
WHERE ORDERS = 1
UNION ALL 
SELECT 
	T1.ORDERS,
	T1.FISCAL_YEAR,
	T1.PERIOD,
	T1.PERIOD1,
	T1.SCENARIO,
	T1.ENTITY_CODE,
	T1.CFC_ENTITY_CODE,
	T1.AMOUNT,
	T1.CHANGES,
	CASE 
	WHEN T1.CHANGES IS NULL THEN NVL(T1.AMOUNT,0)
	WHEN T1.DATA_TYPE = 'SHARES' AND T2.ACC_AMOUNT <= 0 THEN 0
	ELSE T1.CHANGES*T2.ACC_AMOUNT 
	END AS AMOUNT_CHANGES,
	CASE 
	WHEN TO_CHAR(T1.PERIOD1, 'YYYY') != T1.FISCAL_YEAR AND T1.CHANGES IS NULL AND T1.AMOUNT + T2.ACC_AMOUNT <= 0 THEN T2.ACC_AMOUNT * -1
	WHEN T1.CHANGES IS NULL THEN NVL(T1.AMOUNT,0)
	WHEN T1.DATA_TYPE = 'SHARES' AND T2.ACC_AMOUNT <= 0 THEN T2.ACC_AMOUNT * -1
	ELSE T1.CHANGES*T2.ACC_AMOUNT 
	END +NVL(T2.ACC_AMOUNT,0) AS ACC_AMOUNT,
	t1.DATA_TYPE,
	t1.CHINA,
	CASE 
	WHEN TO_CHAR(T1.PERIOD1, 'YYYY') != T1.FISCAL_YEAR AND T1.CHANGES IS NULL AND T1.AMOUNT + T2.ACC_AMOUNT <= 0 THEN 0
	WHEN T1.CHANGES IS NULL THEN NVL(T1.AMOUNT,0)
	WHEN T1.DATA_TYPE = 'SHARES' AND T2.ACC_AMOUNT <= 0 THEN 0
	ELSE T1.CHANGES*NVL(T2.ACC_AMOUNT,0) 
	END AS E2
FROM T_ORDER T1
JOIN DETAILS T2 ON T1.ORDERS = T2.ORDERS+1 AND T1.ENTITY_CODE = T2.ENTITY_CODE AND T1.CFC_ENTITY_CODE = T2.CFC_ENTITY_CODE AND T1.PERIOD = T2.PERIOD AND t1.SCENARIO = t2.SCENARIO AND t1.FISCAL_YEAR = t2.FISCAL_YEAR
)--SELECT * FROM DETAILS --WHERE TO_CHAR(PERIOD, 'YYYY-MM-DD') = '2027-12-31' AND SCENARIO = 'Per Audit' AND CFC_ENTITY_CODE = 'P00013_BVI' 
,CTE AS (
SELECT 
	ORDERS,
	FISCAL_YEAR,
	PERIOD,
	PERIOD1,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	AMOUNT,
	CHANGES,
	AMOUNT_CHANGES,
	ACC_AMOUNT,
	DATA_TYPE,
	CHINA,
	TRUNC(E2,0) AS E2
FROM DETAILS
WHERE FISCAL_YEAR IN (SELECT FISCAL_YEAR FROM FISCAL_YEAR)
ORDER BY ENTITY_CODE,
	CFC_ENTITY_CODE,SCENARIO,PERIOD,
	PERIOD1
)--SELECT * FROM CTE
,CTE_E1 AS (
SELECT
	t1.PERIOD,
	TO_CHAR(t1.PERIOD, 'YYYY') AS REC_YEAR,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.SCENARIO,
	t1.FISCAL_YEAR,
	t1.AMOUNT AS E1
FROM CTE t1
WHERE
	t1.AMOUNT > 0
)
,CTE_E5 AS (
SELECT
	PERIOD,
	FISCAL_YEAR,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	SUM(NVL(TRUNC(AMOUNT_CHANGES,0),0)) * -1 AS E5
FROM CTE 
WHERE TRUNC(PERIOD, 'YYYY') = TRUNC(PERIOD1, 'YYYY')
AND DATA_TYPE= 'SHARES'
GROUP BY PERIOD, FISCAL_YEAR, TO_CHAR(PERIOD, 'YYYY'), SCENARIO ,ENTITY_CODE, CFC_ENTITY_CODE
), CTE_E2 AS (
SELECT 
PERIOD,
FISCAL_YEAR,
SCENARIO,
ENTITY_CODE,
CFC_ENTITY_CODE,
SUM(E2) * -1 AS E2
FROM CTE
WHERE E2 <= 0 --AND ACC_AMOUNT != 0
AND TO_CHAR(PERIOD1,'yyyy')<=TO_CHAR(PERIOD,'yyyy')-1
GROUP BY PERIOD,
FISCAL_YEAR,
SCENARIO,
ENTITY_CODE,
CFC_ENTITY_CODE
)
,CTE2 AS (
SELECT
	t1.PERIOD,
	t1.REC_YEAR,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.SCENARIO,
	t1.FISCAL_YEAR,
	TRUNC(t1.E1, 0) AS E1,
	NVL(t3.E2, 0) AS E2,
	NVL(t2.E5,0) AS E5,
	NVL(t4.AMOUNT,0) AS E7
FROM CTE_E1 t1
LEFT JOIN CTE_E5 t2 ON t1.PERIOD = t2.PERIOD AND t1.FISCAL_YEAR = t2.FISCAL_YEAR AND t1.SCENARIO = t2.SCENARIO AND t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.CFC_ENTITY_CODE = t2.CFC_ENTITY_CODE
LEFT JOIN CTE_E2 t3 ON t1.PERIOD = t3.PERIOD AND t1.FISCAL_YEAR = t3.FISCAL_YEAR AND t1.SCENARIO = t3.SCENARIO AND t1.ENTITY_CODE = t3.ENTITY_CODE AND t1.CFC_ENTITY_CODE = t3.CFC_ENTITY_CODE
LEFT JOIN TRS_FACT_CFC_E7 t4 ON t1.PERIOD = t4.PERIOD AND t1.FISCAL_YEAR = t4.FISCAL_YEAR AND t1.SCENARIO = t4.SCENARIO AND t1.ENTITY_CODE = t4.ENTITY_CODE AND t1.CFC_ENTITY_CODE = t4.CFC_ENTITY_CODE
)
,CTE_DIVIDEND AS (
SELECT
	PERIOD,
	FISCAL_YEAR,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	AVG_EXCHANGE_RATIO,
	L_EXCHANGE_RATE_DATE,
	SUM(NON_CHINA_DIVIDEND_PROFIT_NTD6) AS DIVIDEND6,
	SUM(NON_CHINA_PAID_TAX_NTD10) AS DIVIDEND10,
	SUM(CHINA_DIVIDEND_PROFIT_NTD7) AS DIVIDEND7,
	SUM(CHINA_PAID_TAX_NTD11) AS DIVIDEND11
FROM V_TRS_FACT_CFC_DIVIDEND
GROUP BY PERIOD, FISCAL_YEAR, SCENARIO, ENTITY_CODE, CFC_ENTITY_CODE,L_EXCHANGE_RATE_DATE, AVG_EXCHANGE_RATIO
),CTE3 AS (
SELECT
	t1.PERIOD,
	t1.REC_YEAR,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.SCENARIO,
	t1.FISCAL_YEAR,
	t1.E1,
	t1.E2,
	NVL(t3.DIVIDEND6,0) - (t1.E7 * (t3.AVG_EXCHANGE_RATIO / t3.L_EXCHANGE_RATE_DATE)) AS E3,
	GREATEST(LEAST(DIVIDEND7, (t1.E1 - E2 - (NVL(t3.DIVIDEND6,0) - (t1.E7 * (t3.AVG_EXCHANGE_RATIO / t3.L_EXCHANGE_RATE_DATE))) - NVL(t1.E5,0 ))) ,0)AS E4,
	NVL(t3.DIVIDEND11,0) AS DIVIDEND11,
	NVL(t3.DIVIDEND6,0) AS DIVIDEND6,
	NVL(t3.DIVIDEND7,0) AS DIVIDEND7,
	NVL(t3.DIVIDEND10,0) AS DIVIDEND10,
	t3.AVG_EXCHANGE_RATIO,
	NVL(t3.L_EXCHANGE_RATE_DATE,0) AS L_EXCHANGE_RATE_DATE,
	t1.E5,
	t1.E7
FROM CTE2 t1
LEFT JOIN CTE_DIVIDEND t3 ON t1.PERIOD = t3.PERIOD AND t1.FISCAL_YEAR = t3.FISCAL_YEAR AND t1.SCENARIO = t3.SCENARIO AND t1.ENTITY_CODE = t3.ENTITY_CODE AND t1.CFC_ENTITY_CODE = t3.CFC_ENTITY_CODE
)
SELECT
	t1.PERIOD,
	t1.REC_YEAR,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.SCENARIO,
	t1.FISCAL_YEAR,
	t1.E1,
	t1.E2,
	NVL(t1.E3,0) AS E3,
	NVL(t1.E4,0) AS E4,
	NVL(t1.E5,0) AS E5,
	t1.E1 - t1.E2 - NVL(t1.E3,0) - NVL(t1.E4,0) - NVL(t1.E5,0) AS E6,
	NVL(t1.E7,0) AS E7,
	NVL((t1.DIVIDEND7 -NVL(t1.E4,0)) * ( t1.L_EXCHANGE_RATE_DATE/t1.AVG_EXCHANGE_RATIO ),0) AS E8,
	t1.DIVIDEND10 * ( NVL(t1.E3,0)/AVG_EXCHANGE_RATIO) / ( ( t1.E3/AVG_EXCHANGE_RATIO) + (E7/L_EXCHANGE_RATE_DATE) ) AS E9,
	DIVIDEND11 * (NVL(t1.E4,0)/AVG_EXCHANGE_RATIO) / NVL(NULLIF( ( (t1.E4/AVG_EXCHANGE_RATIO) + ( ((t1.DIVIDEND7 - t1.E4) * (t1.L_EXCHANGE_RATE_DATE/t1.AVG_EXCHANGE_RATIO))/L_EXCHANGE_RATE_DATE) ) , 0), 1) AS E10,
	DIVIDEND10 - t1.DIVIDEND10 * ( NVL(t1.E3,0)/AVG_EXCHANGE_RATIO) / ( ( t1.E3/AVG_EXCHANGE_RATIO) + (E7/L_EXCHANGE_RATE_DATE) ) AS E11,
	DIVIDEND11 - DIVIDEND11 * (NVL(t1.E4,0)/AVG_EXCHANGE_RATIO) / NVL(NULLIF(( (t1.E4/AVG_EXCHANGE_RATIO) + (t1.DIVIDEND7 - t1.E4) * (t1.AVG_EXCHANGE_RATIO / t1.L_EXCHANGE_RATE_DATE) ), 0) ,1) AS E12,
	AVG_EXCHANGE_RATIO,
	L_EXCHANGE_RATE_DATE,
	DIVIDEND6,
	DIVIDEND7
FROM CTE3 t1;


-- TRSDB.V_TRS_FACT_CFC_INV_RECOGNIZED_AMOUNT_DETAIL source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_INV_RECOGNIZED_AMOUNT_DETAIL" ("PERIOD", "SCENARIO", "BASE_ENTITY", "INV_ENTITY", "RATIO", "ID", "COUNTRY_ID", "IS_LOWTAX", "CURRENCY_ID", "AVG_EXCHANGE_RATIO", "AMOUNT", "RE_AMOUNT", "CFC_TAX", "CFC_CURRENCY", "CFC_EXCHANGE_RATIO") AS 
  WITH CTE AS (
SELECT
	t1.PERIOD,
	t1.ENTITY_CODE,
	t1.INV_ENTITY_CODE,
	SUM(AVG_RATIO_HOLD) AS RATIO_HOLD
FROM V_TRS_FACT_CFC_RATIO_HOLD t1
JOIN TRS_DIM_ENTITY t2 ON t1.ENTITY_CODE =t2.ENTITY_CODE --取company_id
JOIN TRS_FACT_COUNTRY_TAX t3 ON t2.COUNTRY_ID = t3.COUNTRY_CODE AND t3.IS_LOWTAX = 'true' AND t1.PERIOD BETWEEN t3.START_DATE AND t3.END_DATE --取是否為低稅區
GROUP BY PERIOD, t1.ENTITY_CODE, INV_ENTITY_CODE,t3.IS_LOWTAX
)
, stock_ratio (PERIOD, base_entity, inv_entity, ratio, path, depth) AS (
  --初始化所有基本關係
  SELECT PERIOD, ENTITY_CODE, INV_ENTITY_CODE, RATIO_HOLD, ENTITY_CODE || '->' || INV_ENTITY_CODE, 1
  FROM CTE
  UNION ALL
  -- 遞歸擴展關係
  SELECT t1.PERIOD, t1.base_entity, t2.INV_ENTITY_CODE, t1.ratio * t2.RATIO_HOLD, 
         t1.path || '->' || t2.INV_ENTITY_CODE, t1.depth + 1
  FROM stock_ratio t1
  JOIN CTE t2 ON t1.inv_entity = t2.ENTITY_CODE AND TO_CHAR(t1.PERIOD, 'YYYY-MM-DD') = TO_CHAR(t2.PERIOD, 'YYYY-MM-DD')  --AND t2.IS_LOWTAX = 'true'
  WHERE t1.depth <= 20 -- 限制遞歸深度以防止無限循環
)
,CTE2 AS (
SELECT PERIOD, 
base_entity, 
inv_entity, 
ratio, 
Path, 
DEPTH
FROM stock_ratio
),CTE_HEAD AS (
SELECT 
	PERIOD,
	BASE_ENTITY,
	INV_ENTITY,
	SUM(RATIO) AS RATIO
FROM CTE2
GROUP BY PERIOD, BASE_ENTITY, INV_ENTITY
),CTE_PERIOD AS (
	SELECT 
		PERIOD,
		ENTITY_CODE,
		SCENARIO
	FROM V_TRS_FACT_CFC_ENTITY_VERSION
), CTE_MV AS (
	SELECT
		T1.CURRENT_CODE AS ENTITY_CODE,
		T1.SCENARIO,
		--有些月份是06有些是6，統一格式
		T1.PERIOD || '-' || LPAD(T1.MONTH, 2, 0)  AS PERIOD,
		T1.CURRENCY_CODE,
		--原始方向改正
		SUM(T1.ACCUMULATED_AMOUNT_ORI) * -1 AS ACCUMULATED_AMOUNT 
	FROM MV_TRS_TB_ACTUAL_ACCOUNT_AMOUNT T1
	WHERE SUBSTR(T2_CODE, 0, 1) BETWEEN '4' AND '7'
	GROUP BY T1.CURRENT_CODE, T1.SCENARIO, T1.PERIOD || '-' || LPAD(T1.MONTH,2,0), T1.CURRENCY_CODE
), CTE_ENTITY AS (
	SELECT 
		ENTITY_CODE,
		COUNTRY_ID,
		CURRENCY_ID
	FROM TRS_DIM_ENTITY
	--改取View不下條件
	--WHERE ENTITY_TYPE_ID = '003'
	--	AND IS_ACTIVE = 'true'
	UNION ALL
	SELECT
		ENTITY_CODE,
		TO_CHAR(COUNTRY_CODE),
		NULL AS CURRENCY_ID
	FROM TRS_DIM_EQUITY_INV_LIST
), INV_RECOGNIZED_AMOUNT AS(
SELECT
ID,
PERIOD,
--CFC_ENTITY_CODE,
t2.CURRENT_CODE AS CFC_ENTITY_CODE,
SCENARIO,
--CFC_INV_ENTITY_CODE,
t3.CURRENT_CODE AS CFC_INV_ENTITY_CODE,
t1.CURRENCY_ID,
RECOGNIZED_AMOUNT,
CFC_TAX,
RE_AMOUNT
FROM 
TRS_FACT_CFC_INV_RECOGNIZED_AMOUNT t1
LEFT JOIN V_TRS_DIM_ENTITY_CUR t2 ON t1.CFC_ENTITY_CODE =t2.ENTITY_CODE --取CFC_ENTITY_CODE現值
LEFT JOIN V_TRS_DIM_ENTITY_CUR t3 ON t1.CFC_INV_ENTITY_CODE =t3.ENTITY_CODE --取CFC_ENTITY_CODE現值
)
SELECT
	t0.PERIOD,
	t0.SCENARIO,
	t1.BASE_ENTITY,
	t1.INV_ENTITY,
	TRUNC(t1.RATIO, 4) AS RATIO,
	t4.ID,
	t2.COUNTRY_ID,
	NVL(t3.IS_LOWTAX, t10.IS_LOWTAX) AS IS_LOWTAX,
	NVL(t2.CURRENCY_ID, t4.CURRENCY_ID) AS CURRENCY_ID,
	NVL(t5.AVG_EXCHANGE_RATIO, t11.AVG_EXCHANGE_RATIO) AS AVG_EXCHANGE_RATIO,
	NVL(t8.ACCUMULATED_AMOUNT, t4.RECOGNIZED_AMOUNT) AS AMOUNT,
	t4.RE_AMOUNT,
	t4.CFC_TAX,
	t6.CURRENCY_ID AS CFC_CURRENCY,
	t7.AVG_EXCHANGE_RATIO AS CFC_EXCHANGE_RATIO
FROM CTE_PERIOD t0
JOIN CTE_HEAD t1 ON t0.PERIOD = t1.PERIOD AND t0.ENTITY_CODE = t1.BASE_ENTITY
JOIN CTE_ENTITY t2 ON t1.INV_ENTITY = t2.ENTITY_CODE --AND t2.ENTITY_TYPE_ID = '003'
JOIN TRS_FACT_COUNTRY_TAX t3 ON t2.COUNTRY_ID = t3.COUNTRY_CODE AND t0.PERIOD BETWEEN t3.START_DATE AND t3.END_DATE AND t3.IS_LOWTAX = 'false'
LEFT JOIN INV_RECOGNIZED_AMOUNT t4 ON t1.PERIOD = t4.PERIOD AND t1.BASE_ENTITY = t4.CFC_ENTITY_CODE AND t1.INV_ENTITY = t4.CFC_INV_ENTITY_CODE AND t0.SCENARIO = t4.SCENARIO
LEFT JOIN CTE_ENTITY t6 ON t1.BASE_ENTITY = t6.ENTITY_CODE --AND t6.ENTITY_TYPE_ID = '003'
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t7 ON t6.CURRENCY_ID = t7.CURRENCY_ID AND t7.PERIOD = TO_CHAR(t1.PERIOD, 'YYYY-MM') AND t0.SCENARIO = t7.SCENARIO AND t7.TARGET_CURRENCY_ID = 'NTD'
LEFT JOIN CTE_MV t8 ON t8.PERIOD = TO_CHAR(t0.PERIOD, 'YYYY-MM') AND t0.SCENARIO = t8.SCENARIO AND t1.INV_ENTITY = t8.ENTITY_CODE
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t5 ON t8.CURRENCY_CODE = t5.CURRENCY_ID AND t5.TARGET_CURRENCY_ID = 'NTD' AND t5.PERIOD = TO_CHAR(t1.PERIOD, 'YYYY-MM') AND t0.SCENARIO = t5.SCENARIO
LEFT JOIN CTE_ENTITY t9 ON t4.CFC_INV_ENTITY_CODE = t9.ENTITY_CODE --AND t9.ENTITY_TYPE_ID = '003'
LEFT JOIN TRS_FACT_COUNTRY_TAX t10 ON t9.COUNTRY_ID = t10.COUNTRY_CODE AND t0.PERIOD BETWEEN t10.START_DATE AND t10.END_DATE
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t11 ON t4.CURRENCY_ID = t11.CURRENCY_ID AND t11.PERIOD = TO_CHAR(t4.PERIOD, 'YYYY-MM') AND t4.SCENARIO = t11.SCENARIO AND t11.TARGET_CURRENCY_ID = 'NTD'
;


-- TRSDB.V_TRS_FACT_CFC_NONLOW_ADJ source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_NONLOW_ADJ" ("ID", "CFC_ENTITY_CODE", "SCENARIO", "PERIOD", "INV_ENTITY_CODE", "NON_LOWTAX_ENTITY_CODE", "DISPOSE_DATE", "CURRENCY_ID", "ORIGINAL_COST", "BOOK_VALUE", "AVG_EXCHANGE_RATIO", "RATIO_HOLD", "DISPOSE_ADJ_NTD", "SELL_COMPANY", "SELL_CURRENCY_ID", "INCOME_TAX", "SELL_RATIO_HOLD", "SELL_EXCHANGE_RATIO", "INCOME_TAX_NTD", "CREATED_TIME") AS 
  WITH CTE_PERIOD AS (
SELECT
	PERIOD,
	SCENARIO,
	ENTITY_CODE
FROM V_TRS_FACT_CFC_ENTITY_VERSION
),T AS( 
SELECT
	t1.ID,
	t1.SCENARIO,
	--t1.CFC_ENTITY_CODE,
	t2.CURRENT_CODE AS CFC_ENTITY_CODE,
	--t1.INV_ENTITY_CODE,
	t3.CURRENT_CODE AS INV_ENTITY_CODE,
	t1.NON_LOWTAX_ENTITY_CODE,
	t1.DISPOSE_DATE,
	t1.CURRENCY_ID,
	t1.ORIGINAL_COST,
	t1.BOOK_VALUE,
	t1.RATIO_HOLD,
	t1.SELL_COMPANY,
	t1.SELL_CURRENCY_ID,
	t1.INCOME_TAX,
	t1.SELL_RATIO_HOLD,
	t1.CREATED_TIME
FROM TRS_FACT_CFC_NONLOW_ADJ t1
LEFT JOIN V_TRS_DIM_ENTITY_CUR t2 ON t1.CFC_ENTITY_CODE = t2.ENTITY_CODE
LEFT JOIN V_TRS_DIM_ENTITY_CUR t3 ON t1.INV_ENTITY_CODE = t3.ENTITY_CODE
)
  SELECT
	t1.ID,
	t1.CFC_ENTITY_CODE,
	t0.SCENARIO,
	t0.PERIOD,
	t1.INV_ENTITY_CODE,
	t1.NON_LOWTAX_ENTITY_CODE,
	t1.DISPOSE_DATE,
	t1.CURRENCY_ID,
	t1.ORIGINAL_COST,
	t1.BOOK_VALUE,
	t3.AVG_EXCHANGE_RATIO,
	t1.RATIO_HOLD,
	TRUNC((t1.BOOK_VALUE - t1.ORIGINAL_COST) * t3.AVG_EXCHANGE_RATIO * t1.RATIO_HOLD, 0)AS DISPOSE_ADJ_NTD,
	t1.SELL_COMPANY,
	t1.SELL_CURRENCY_ID,
	t1.INCOME_TAX,
	t1.SELL_RATIO_HOLD,
	t4.AVG_EXCHANGE_RATIO AS SELL_EXCHANGE_RATIO,
	TRUNC(t1.INCOME_TAX * t1.SELL_RATIO_HOLD * t4.AVG_EXCHANGE_RATIO, 0)AS INCOME_TAX_NTD,
	t1.CREATED_TIME
FROM CTE_PERIOD t0
JOIN T t1 ON t1.DISPOSE_DATE BETWEEN TRUNC(t0.PERIOD, 'YEAR') AND t0.PERIOD AND t0.ENTITY_CODE = t1.CFC_ENTITY_CODE AND t0.SCENARIO = t1.SCENARIO
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t3 ON t1.CURRENCY_ID = t3.CURRENCY_ID AND t3.TARGET_CURRENCY_ID = 'NTD' AND TO_CHAR(t0.PERIOD, 'YYYY-MM') = t3.PERIOD AND t1.SCENARIO = t3.SCENARIO
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t4 ON t1.SELL_CURRENCY_ID = t4.CURRENCY_ID AND t4.TARGET_CURRENCY_ID = 'NTD' AND TO_CHAR(t0.PERIOD, 'YYYY-MM') = t4.PERIOD AND t1.SCENARIO = t4.SCENARIO;


-- TRSDB.V_TRS_FACT_CFC_OTHER_AMOUNT source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_OTHER_AMOUNT" ("ID", "PERIOD", "INV_ENTITY_CODE", "SCENARIO", "CURRENCY_CODE", "AVG_EXCHANGE_RATIO", "DESPITE_PROFIT_ORI", "FVPL_AMOUNT_ORI", "FVPL_FVCHANGE_ORI", "RE_FVPL_AMOUNT_ORI", "DESPITE_PROFIT", "FVPL_AMOUNT", "FVPL_FVCHANGE", "RE_FVPL_AMOUNT", "CREATED_TIME", "CREATED_BY") AS 
  WITH CTE AS (
SELECT DISTINCT
	T1.PERIOD|| '-'|| lpad(t1.MONTH, 2,0) AS PERIOD1,
	T1.ENTITY_CODE,
	T1.SCENARIO,
	T1.CURRENCY_CODE,
	T2.AVG_EXCHANGE_RATIO
FROM TRS_FACT_TRIAL_BALANCE T1
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW T2 ON T1.PERIOD|| '-'||lpad(t1.MONTH, 2,0) = T2.PERIOD AND T1.CURRENCY_CODE = T2.CURRENCY_ID  AND T2.TARGET_CURRENCY_ID = 'NTD' AND T1.SCENARIO = T2.SCENARIO 
)
SELECT
	T1.ID,
	T1.PERIOD,
	T1.INV_ENTITY_CODE,
	T1.SCENARIO,
	T2.CURRENCY_CODE,
	T2.AVG_EXCHANGE_RATIO,
	T1.DESPITE_PROFIT AS DESPITE_PROFIT_ORI,
	T1.FVPL_AMOUNT AS FVPL_AMOUNT_ORI,
	T1.FVPL_FVCHANGE AS FVPL_FVCHANGE_ORI,
	T1.RE_FVPL_AMOUNT AS RE_FVPL_AMOUNT_ORI,
	T1.DESPITE_PROFIT * AVG_EXCHANGE_RATIO AS DESPITE_PROFIT,
	T1.FVPL_AMOUNT * AVG_EXCHANGE_RATIO AS FVPL_AMOUNT,
	T1.FVPL_FVCHANGE * AVG_EXCHANGE_RATIO AS FVPL_FVCHANGE,
	T1.RE_FVPL_AMOUNT * AVG_EXCHANGE_RATIO AS RE_FVPL_AMOUNT,
	T1.CREATED_TIME,
	T1.CREATED_BY
FROM TRS_FACT_CFC_OTHER_AMOUNT T1
LEFT JOIN CTE T2 ON TO_CHAR(T1.PERIOD, 'YYYY-MM') = T2.PERIOD1 AND T1.INV_ENTITY_CODE = T2.ENTITY_CODE AND T1.SCENARIO = T2.SCENARIO;


-- TRSDB.V_TRS_FACT_CFC_RATIO_HOLD source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_RATIO_HOLD" ("PERIOD", "ENTITY_CODE", "INV_ENTITY_CODE", "RATIO_HOLD", "START_DATE", "END_DATE", "DATE_DIF", "TOTAL_DAYS", "AVG_RATIO_HOLD") AS 
  WITH PERIOD AS(
--篩出全部年月
SELECT DISTINCT 
PERIOD
FROM TRSDB.TRS_FACT_CFC_ENTITY_VERSION
),CTE AS (
--先篩出符合年月條件的投資明細
SELECT
        PERIOD,
        ENTITY_CODE,
        INV_ENTITY_CODE,
        RATIO_HOLD,
        CASE WHEN TO_CHAR(START_DATE,'yyyy') < TO_CHAR(PERIOD,'yyyy') THEN TRUNC(PERIOD,'Y')
        ELSE START_DATE END AS START_DATE,
        --若起始年度小於PERIOD則改成當年度第一天
        CASE WHEN END_DATE >= PERIOD THEN PERIOD
        ELSE END_DATE END AS END_DATE
        --若結束日期大於PERIOD則改成PERIOD當年度第一天
FROM PERIOD
JOIN TRS_FACT_GROUP_INV_REL ON NOT (END_DATE < TRUNC(PERIOD,'Y') OR START_DATE > PERIOD)
--篩掉起訖區間完全沒包含到PERIOD及該年度01/01
WHERE 1 = 1
)
SELECT
--計算日期加權平均
       t1.PERIOD,
        CASE WHEN t2.CURRENT_CODE IS NOT NULL THEN t2.CURRENT_CODE
		ELSE t1.ENTITY_CODE end AS ENTITY_CODE,
		CASE WHEN t3.CURRENT_CODE IS NOT NULL THEN t3.CURRENT_CODE
		ELSE t1.INV_ENTITY_CODE end AS INV_ENTITY_CDOE,
        RATIO_HOLD,START_DATE,END_DATE,
        (END_DATE - START_DATE + 1) AS DATE_DIF, --計算持有天數
        (PERIOD-TRUNC(PERIOD,'Y')+1) AS TOTAL_DAYS, --計算至年月版本的總天數
       ROUND((END_DATE - START_DATE + 1) * RATIO_HOLD / (PERIOD-TRUNC(PERIOD,'Y')+1) ,17 )  AS AVG_RATIO_HOLD 
        --直接持有比例*持有天數/至年月版本天數=加權平均持有比例
FROM CTE t1
LEFT JOIN V_TRS_DIM_ENTITY_CUR t2 ON t1.ENTITY_CODE = t2.ENTITY_CODE
LEFT JOIN V_TRS_DIM_ENTITY_CUR t3 ON t1.INV_ENTITY_CODE = t3.ENTITY_CODE;


-- TRSDB.V_TRS_FACT_CFC_REALIZED_LOSS source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_REALIZED_LOSS" ("ID", "CFC_ENTITY_CODE", "SCENARIO", "PERIOD", "INV_ENTITY_CODE", "NON_LOWTAX_ENTITY_CODE", "LOSS_DATE", "LOSS_TYPE", "CURRENCY_ID", "ORI_INV_AMOUNT", "LOSS_REALIZED_RATIO", "RATIO_HOLD", "AVG_EXCHANGE_RATIO", "REALIZED_LOSS_NTD", "CREATED_TIME") AS 
  WITH CTE_PERIOD AS (
SELECT
	PERIOD,
	SCENARIO,
	ENTITY_CODE
FROM V_TRS_FACT_CFC_ENTITY_VERSION
),REALIZED_LOSS AS(
SELECT
t1.ID,
t1.SCENARIO,
--t1.CFC_ENTITY_CODE,
t2.CURRENT_CODE AS CFC_ENTITY_CODE,--用current_code輸出
--t1.INV_ENTITY_CODE,
t3.CURRENT_CODE AS INV_ENTITY_CODE,--用current_code輸出
t1.NON_LOWTAX_ENTITY_CODE,
t1.LOSS_DATE,
t1.LOSS_TYPE,
t1.CURRENCY_ID,
t1.ORI_INV_AMOUNT,
t1.LOSS_REALIZED_RATIO,
t1.RATIO_HOLD,
t1.CREATED_TIME
FROM TRS_FACT_CFC_REALIZED_LOSS t1
LEFT JOIN V_TRS_DIM_ENTITY_CUR t2 ON t1.CFC_ENTITY_CODE = t2.ENTITY_CODE
LEFT JOIN V_TRS_DIM_ENTITY_CUR t3 ON t1.INV_ENTITY_CODE = t3.ENTITY_CODE
) 
SELECT
	t1.ID,
	t1.CFC_ENTITY_CODE,
	t0.SCENARIO,
	t0.PERIOD,
	t1.INV_ENTITY_CODE,
	t1.NON_LOWTAX_ENTITY_CODE,
	t1.LOSS_DATE,
	t1.LOSS_TYPE,
	t1.CURRENCY_ID,
	t1.ORI_INV_AMOUNT,
	t1.LOSS_REALIZED_RATIO,
	t1.RATIO_HOLD,
	t3.AVG_EXCHANGE_RATIO,
	TRUNC(t1.ORI_INV_AMOUNT * t1.LOSS_REALIZED_RATIO * t1.RATIO_HOLD * t3.AVG_EXCHANGE_RATIO, 0) AS REALIZED_LOSS_NTD,
	t1.CREATED_TIME
FROM CTE_PERIOD t0
JOIN REALIZED_LOSS t1 ON t1.LOSS_DATE BETWEEN TRUNC(t0.PERIOD, 'YEAR') AND t0.PERIOD AND t0.ENTITY_CODE = t1.CFC_ENTITY_CODE AND t0.SCENARIO = t1.SCENARIO
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t3 ON t1.CURRENCY_ID = t3.CURRENCY_ID AND t3.TARGET_CURRENCY_ID = 'NTD' AND TO_CHAR(t0.PERIOD, 'YYYY-MM') = t3.PERIOD AND t1.SCENARIO = t3.SCENARIO
;


-- TRSDB.V_TRS_FACT_CFC_RECOGNIZED_LOSS source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_RECOGNIZED_LOSS" ("ID", "PERIOD", "CFC_ENTITY_CODE", "SCENARIO", "TYPE", "DECLARE_DATE", "REC_YEAR", "CURRENCY", "REDUC_RATIO", "AMOUNT_ORI", "EXCHANGE_RATIO", "AMOUNT") AS 
  WITH CTE_PERIOD AS (
SELECT
	PERIOD,
	SCENARIO,
	ENTITY_CODE
FROM V_TRS_FACT_CFC_ENTITY_VERSION
),RECOGNIZED_LOSS AS(
SELECT
t1.ID,
t2.CURRENT_CODE AS CFC_ENTITY_CODE, --用CURRENT_CODE輸出
t1.SCENARIO ,
t1."TYPE" ,
t1.DECLARE_DATE ,
t1.REC_YEAR ,
t1.REDUC_RATIO ,
t1.AMOUNT ,
t2.country_id
FROM TRS_FACT_CFC_RECOGNIZED_LOSS t1
LEFT JOIN V_TRS_DIM_ENTITY_CUR  t2 ON t1.CFC_ENTITY_CODE = t2.ENTITY_CODE 
)
SELECT
t1.ID,
t0.PERIOD,
t1.CFC_ENTITY_CODE,
t1.scenario,
t1.type,
t1.DECLARE_DATE,
t1.REC_YEAR,
t3.DEFAULT_CURRENCY_ID as CURRENCY,
t1.REDUC_RATIO,
t1.AMOUNT as AMOUNT_ORI,
t4.AVG_EXCHANGE_RATIO as EXCHANGE_RATIO,
t4.AVG_EXCHANGE_RATIO * nvl(t1.AMOUNT,0) as AMOUNT
FROM CTE_PERIOD t0
JOIN RECOGNIZED_LOSS t1 ON t1.DECLARE_DATE BETWEEN TRUNC(t0.PERIOD, 'YEAR') AND t0.PERIOD AND t0.ENTITY_CODE = t1.CFC_ENTITY_CODE AND t0.SCENARIO = t1.SCENARIO
--LEFT JOIN V_TRS_DIM_ENTITY_CUR t2 ON t1.CFC_ENTITY_CODE = t2.ENTITY_CODE --AND t2.ENTITY_TYPE_ID = '003'
LEFT JOIN (SELECT DISTINCT country_id,DEFAULT_CURRENCY_ID FROM V_TRS_DIM_COUNTRY) t3 on t1.COUNTRY_ID = t3.COUNTRY_ID 
left join V_TRS_FACT_EXCHANGE_BANKOFTW t4 on t3.DEFAULT_CURRENCY_ID = t4.CURRENCY_ID and t1.scenario = t4.scenario AND t4.TARGET_CURRENCY_ID = 'NTD' AND TO_CHAR(t0.PERIOD, 'YYYY-MM') = t4.PERIOD
;


-- TRSDB.V_TRS_FACT_CFC_RESTRICTED_DISTRIBUTION source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_RESTRICTED_DISTRIBUTION" ("ID", "PERIOD", "ENTITY_CODE", "SCENARIO", "ITEM_PERIOD", "ITEM", "ORIGIN_YEAR", "AMOUNT_ORI", "CREATED_TIME", "CURRENCY_ID", "AVG_EXCHANGE_RATIO", "AMOUNT") AS 
  WITH T AS(
SELECT 
ID,
CURRENT_CODE AS CFC_ENTITY_CODE,
SCENARIO,
ITEM_PERIOD,
ITEM,
ORIGIN_YEAR,
AMOUNT,
CREATED_TIME,
t1.CURRENCY_ID
FROM TRS_FACT_CFC_RESTRICTED_DISTRIBUTION t1
LEFT JOIN V_TRS_DIM_ENTITY_CUR t2 ON t1.CFC_ENTITY_CODE = t2.ENTITY_CODE
)  
SELECT
	t2.ID,
	t1.PERIOD,
	t1.ENTITY_CODE,
--	t2.CFC_ENTITY_CODE,
	t2.SCENARIO,
	t2.ITEM_PERIOD,
	t2.ITEM,
	t2.ORIGIN_YEAR,
	t2.AMOUNT AS AMOUNT_ORI,
	t2.CREATED_TIME,
	t2.CURRENCY_ID,
	t4.AVG_EXCHANGE_RATIO,
	TRUNC(t2.AMOUNT * t4.AVG_EXCHANGE_RATIO, 0) AS AMOUNT
FROM V_TRS_FACT_CFC_ENTITY_VERSION t1
JOIN T t2 ON t2.CFC_ENTITY_CODE = t1.ENTITY_CODE AND t1.SCENARIO = t2.SCENARIO
AND t2.ITEM_PERIOD BETWEEN TRUNC(t1.PERIOD, 'YEAR') AND t1.PERIOD
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t4 ON t2.CURRENCY_ID = t4.CURRENCY_ID AND t4.TARGET_CURRENCY_ID = 'NTD' AND t2.SCENARIO = t4.SCENARIO AND TO_CHAR(t1.PERIOD, 'YYYY-MM') = t4.PERIOD
UNION ALL
  (SELECT
	t2.ID,
	t1.PERIOD,
	t1.ENTITY_CODE,
--	t2.CFC_ENTITY_CODE,
	t2.SCENARIO,
	t2.ITEM_PERIOD,
	t2.ITEM,
	t2.ORIGIN_YEAR,
	t2.AMOUNT AS AMOUNT_ORI,
	t2.CREATED_TIME,
	t2.CURRENCY_ID,
	t4.AVG_EXCHANGE_RATIO,
	TRUNC(t2.AMOUNT * t4.AVG_EXCHANGE_RATIO, 0) AS AMOUNT
FROM V_TRS_FACT_CFC_ENTITY_VERSION t1
JOIN T t2 ON t2.CFC_ENTITY_CODE = t1.ENTITY_CODE AND t1.SCENARIO = t2.SCENARIO
AND TO_CHAR(t2.ITEM_PERIOD,'yyyy') = TO_CHAR(t1.PERIOD,'yyyy')+1
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t4 ON t2.CURRENCY_ID = t4.CURRENCY_ID AND t4.TARGET_CURRENCY_ID = 'NTD' AND t2.SCENARIO = t4.SCENARIO AND TO_CHAR(t1.PERIOD, 'YYYY-MM') = t4.PERIOD
AND TO_CHAR(t1.period,'MM')='12');


-- TRSDB.V_TRS_FACT_CFC_TAX_INCOME source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_TAX_INCOME" ("ENTITY_CODE", "INV_ENTITY_CODE", "PERIOD", "SCENARIO", "SUB_OPE_EXEMPTION", "COUNTRY_ID", "LOCAL_CURRENCY_ID", "ACCUMULATED_AMOUNT", "AMOUNT_TOTAL", "REALIZED_LOSS", "DISTRI_NONCN", "DISTRI_CN", "DESPITE_PROFIT", "FVPL_APP", "FVPL_FVCHANGE", "FVPL_AMOUNT", "RE_FVPL_AMOUNT", "NON_CFC_DISPOSAL_ADJ", "CFC_EARNINGS", "AVG_RATIO_HOLD") AS 
  WITH CTE0 AS (
SELECT
	t1.PERIOD,
	t1.ENTITY_CODE,
	t1.SCENARIO
FROM V_TRS_FACT_CFC_ENTITY_VERSION t1
JOIN TRS_DIM_ENTITY t2 ON t1.ENTITY_CODE = t2.ENTITY_CODE AND T2.COUNTRY_ID != 'TW'
),CTE_REC_AMT_TOTAL AS (
SELECT
	T1.PERIOD ,
	T1.SCENARIO ,
	T2.CURRENT_CODE AS CFC_ENTITY_CODE,
	T1.TAX_REV_TOTAL,
	T1.TAX_EXP_TOTAL,
	T1.RE_ADD_TOTAL,
	T1.RE_LESS_TOTAL
FROM TRS_FACT_CFC_INV_RECOGNIZED_AMOUNT_TOTAL T1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.CFC_ENTITY_CODE = T2.ENTITY_CODE 
)
,CTE AS (
SELECT
	t1.PERIOD,
	t1.SCENARIO,
	t1.BASE_ENTITY AS CFC_ENTITY_CODE,
	SUM(TRUNC(t1.AMOUNT * t1.AVG_EXCHANGE_RATIO * t1.RATIO, 0)) + SUM(TRUNC(NVL(t1.RE_AMOUNT, 0) * t1.AVG_EXCHANGE_RATIO * t1.RATIO, 0)) AS AMOUNT_NTD,
	SUM(TRUNC(t1.CFC_TAX * t1.CFC_EXCHANGE_RATIO, 0)) AS CFC_TAX_NTD,
	TRUNC(t2.TAX_REV_TOTAL * t1.CFC_EXCHANGE_RATIO, 0) AS TAX_REV_TOTAL,
	TRUNC(t2.TAX_EXP_TOTAL * t1.CFC_EXCHANGE_RATIO, 0)AS TAX_EXP_TOTAL
FROM V_TRS_FACT_CFC_INV_RECOGNIZED_AMOUNT_DETAIL t1
LEFT JOIN CTE_REC_AMT_TOTAL t2 ON t1.PERIOD = t2.PERIOD AND t1.BASE_ENTITY = t2.CFC_ENTITY_CODE AND t1.SCENARIO = t2.SCENARIO
WHERE t1.AMOUNT IS NOT NULL AND IS_LOWTAX = 'false'
GROUP BY t1.PERIOD, t1.SCENARIO, t1.BASE_ENTITY, TAX_REV_TOTAL, (t2.TAX_REV_TOTAL * t1.CFC_EXCHANGE_RATIO), (t2.TAX_EXP_TOTAL * t1.CFC_EXCHANGE_RATIO)
), CTE2 AS (
SELECT
	t1.PERIOD,
	t1.SCENARIO,
	t1.CFC_ENTITY_CODE,
	(NVL(AMOUNT_NTD, 0) + CASE WHEN TAX_REV_TOTAL IS NOT NULL OR TAX_EXP_TOTAL IS NOT NULL THEN NVL(TAX_REV_TOTAL, 0) + NVL(TAX_EXP_TOTAL, 0) ELSE NVL(CFC_TAX_NTD, 0) END) AS AMOUNT_TOTAL
FROM CTE t1
)
,CTE3 AS (
--自”獲配股利及實際虧損”頁面取數，加總非低稅區國家項目、金額為負之”CFC實際獲配/實際虧損金額”之金額並乘以-1
	SELECT 
		t1.PERIOD,
		t1.SCENARIO,
		t1.CFC_ENTITY_CODE,
		SUM(t1.REALIZED_LOSS_NTD) AS REALIZED_LOSS
	FROM V_TRS_FACT_CFC_REALIZED_LOSS t1
	GROUP BY t1.PERIOD, t1.SCENARIO, t1.CFC_ENTITY_CODE
),CTE_INV_DIVIDEND AS (
SELECT
	t1.PERIOD,
	t1.SCENARIO,
	t1.CFC_ENTITY_CODE,
	t1.AMOUNT_TOTAL AS AMOUNT,
	t1.RATIO_HOLD,
	t1.AVG_EXCHANGE_RATIO,
	NVL(t1.TAX_CREDIT_TOTAL, 0)AS DEDUCTABLE_TAX,
	t1.IS_LOWTAX,
	t1.COUNTRY_ID,
	t1.DECLARATION_DATE,
	t1.FISCAL_YEAR
FROM V_TRS_FACT_CFC_INV_DIVIDEND t1
WHERE AMOUNT_TOTAL > 0
	AND IS_LOWTAX = 'false' --FALSE
	AND (DECLARATION_DATE >= TO_DATE('2024-04-01', 'YYYY-MM-DD') OR FISCAL_YEAR >= 2023)
)
,CTE4 AS (
--自”獲配股利及實際虧損”頁面取數，加總非低稅區國家項目且非中國大陸、金額為正之”CFC實際獲配/實際虧損金額減除可扣抵稅額”之金額
	SELECT
		t1.PERIOD,
		t1.SCENARIO,
		t1.CFC_ENTITY_CODE,
		TRUNC(SUM(t1.AMOUNT - DEDUCTABLE_TAX), 5) AS DISTRI_NONCN
	FROM CTE_INV_DIVIDEND t1
	WHERE COUNTRY_ID != 'CN'
	GROUP BY t1.PERIOD, t1.SCENARIO, t1.CFC_ENTITY_CODE
)
,CTE5 AS (
--盈餘分配數
--自”獲配股利及實際虧損”頁面取數，加總非低稅區國家項目且為中國大陸、金額為正之”CFC實際獲配/實際虧損金額”之金額
	SELECT
		t1.PERIOD,
		t1.SCENARIO,
		t1.CFC_ENTITY_CODE,
		TRUNC(SUM(t1.AMOUNT), 5) AS DISTRI_CN
	FROM CTE_INV_DIVIDEND t1
	WHERE COUNTRY_ID = 'CN'
	GROUP BY t1.PERIOD, t1.SCENARIO, t1.CFC_ENTITY_CODE
),CTE8 AS (
--稅後淨利
--依篩選項加總TB數據，將4、5、6、7開頭科目加總
	SELECT
		T1.CURRENT_CODE AS ENTITY_CODE,
		T1.SCENARIO,
		--有些月份是06有些是6，統一格式
		T1.PERIOD || '-' || LPAD(T1.MONTH, 2, 0)  AS PERIOD,
		TRUNC(SUM(T1.ACCUMULATED_AMOUNT_ORI * -1 * T3.AVG_EXCHANGE_RATIO), 0)AS ACCUMULATED_AMOUNT 
	FROM MV_TRS_TB_ACTUAL_ACCOUNT_AMOUNT T1
	JOIN TRS_DIM_ENTITY t2 ON t1.ENTITY_CODE = t2.ENTITY_CODE AND T2.COUNTRY_ID != 'TW'
	LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW T3 ON (T1.PERIOD || '-' || LPAD(T1.MONTH,2,0)) = T3.PERIOD AND T1.CURRENCY_CODE = T3.CURRENCY_ID AND TARGET_CURRENCY_ID = 'NTD' AND T1.SCENARIO = T3.SCENARIO 
	WHERE SUBSTR(T2_CODE, 0, 1) BETWEEN '4' AND '7' 
	GROUP BY T1.CURRENT_CODE, T1.SCENARIO, T1.PERIOD || '-' || LPAD(T1.MONTH,2,0)
)
,CTE_NONLOW AS (
	SELECT
		PERIOD,
		SCENARIO,
		CFC_ENTITY_CODE,
		SUM(DISPOSE_ADJ_NTD + NVL(INCOME_TAX_NTD, 0)) AS NON_CFC_DISPOSAL_ADJ
	FROM V_TRS_FACT_CFC_NONLOW_ADJ
	GROUP BY CFC_ENTITY_CODE, SCENARIO, PERIOD
),CTE_RATIO_HOLD AS (
	SELECT
		ENTITY_CODE,
		PERIOD,
		INV_ENTITY_CODE,
		TRUNC(SUM(AVG_RATIO_HOLD), 4) AS AVG_RATIO_HOLD
	FROM V_TRS_FACT_CFC_RATIO_HOLD
	GROUP BY ENTITY_CODE, PERIOD, INV_ENTITY_CODE
),CTE9 AS (
SELECT
	TRUNC(CTE0.PERIOD, 'DD') AS PERIOD,
	CTE0.SCENARIO,
	CTE0.ENTITY_CODE AS CFC_ENTITY_CODE,
	CTE8.ACCUMULATED_AMOUNT,
	CTE2.AMOUNT_TOTAL,
	CTE3.REALIZED_LOSS,
	CTE4.DISTRI_NONCN,
	CTE5.DISTRI_CN,
	CTE_NONLOW.NON_CFC_DISPOSAL_ADJ
FROM CTE0
LEFT JOIN CTE2 ON CTE0.PERIOD = CTE2.PERIOD AND CTE0.SCENARIO = CTE2.SCENARIO AND CTE0.ENTITY_CODE = CTE2.CFC_ENTITY_CODE
LEFT JOIN CTE3 ON CTE0.SCENARIO = CTE3.SCENARIO AND CTE0.PERIOD = CTE3.PERIOD AND CTE0.ENTITY_CODE = CTE3.CFC_ENTITY_CODE 
LEFT JOIN CTE4 ON CTE0.SCENARIO = CTE4.SCENARIO AND CTE4.PERIOD = CTE0.PERIOD AND CTE0.ENTITY_CODE = CTE4.CFC_ENTITY_CODE 
LEFT JOIN CTE5 ON CTE0.SCENARIO = CTE5.SCENARIO AND CTE5.PERIOD = CTE0.PERIOD AND CTE0.ENTITY_CODE = CTE5.CFC_ENTITY_CODE 
LEFT JOIN CTE8 ON CTE8.PERIOD = TO_CHAR(CTE0.PERIOD, 'YYYY-MM') AND CTE0.SCENARIO = CTE8.SCENARIO AND CTE0.ENTITY_CODE = CTE8.ENTITY_CODE
LEFT JOIN CTE_NONLOW ON CTE0.PERIOD = CTE_NONLOW.PERIOD AND CTE0.SCENARIO = CTE_NONLOW.SCENARIO AND CTE0.ENTITY_CODE = CTE_NONLOW.CFC_ENTITY_CODE
),CTE_EXEMPTION AS (
SELECT
	t1.ENTITY_CODE,
	t1.INV_ENTITY_CODE,
	t1.PERIOD,
	t1.SCENARIO,
	t1.SUB_OPE_EXEMPTION,
	t1.COUNTRY_ID,
	t1.LOCAL_CURRENCY_ID
FROM V_TRS_FACT_CFC_EXEMPTION t1
WHERE t1.IS_CFC = 'true'
),CTE_OTHER_AMOUNT AS (
SELECT
	T1.PERIOD ,
	T2.CURRENT_CODE AS INV_ENTITY_CODE,
	T1.SCENARIO ,
	T1.DESPITE_PROFIT,
	T1.FVPL_AMOUNT,
	T1.FVPL_FVCHANGE,
	T1.RE_FVPL_AMOUNT
FROM V_TRS_FACT_CFC_OTHER_AMOUNT T1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.INV_ENTITY_CODE = T2.ENTITY_CODE 
),CTE_FVPL AS (
SELECT
	T1.PERIOD ,
	T1.FVPL_APP,
	T2.CURRENT_CODE AS ENTITY_CODE 
FROM TRS_FACT_FVPL_EXEMPTION T1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.ENTITY_CODE = T2.ENTITY_CODE 
)
SELECT
	t1.ENTITY_CODE,
	t1.INV_ENTITY_CODE,
	t1.PERIOD,
	t1.SCENARIO,
	t1.SUB_OPE_EXEMPTION,
	t1.COUNTRY_ID,
	t1.LOCAL_CURRENCY_ID,
	CTE9.ACCUMULATED_AMOUNT,
	CTE9.AMOUNT_TOTAL,
	CTE9.REALIZED_LOSS,
	CTE9.DISTRI_NONCN,
	CTE9.DISTRI_CN,
	t2.DESPITE_PROFIT,
	t4.FVPL_APP,
	CASE WHEN t4.FVPL_APP != 'Y' THEN 0 ELSE t2.FVPL_FVCHANGE END AS FVPL_FVCHANGE,
	CASE WHEN t4.FVPL_APP != 'Y' THEN 0 ELSE t2.FVPL_AMOUNT END AS FVPL_AMOUNT,
	CASE WHEN t4.FVPL_APP != 'Y' THEN 0 ELSE t2.RE_FVPL_AMOUNT END AS RE_FVPL_AMOUNT,
	CTE9.NON_CFC_DISPOSAL_ADJ,
	TRUNC(NVL(CTE9.ACCUMULATED_AMOUNT, 0) - NVL(CTE9.AMOUNT_TOTAL, 0) + NVL(t2.DESPITE_PROFIT, 0) -
	NVL(CTE9.REALIZED_LOSS, 0) + NVL(CTE9.DISTRI_NONCN, 0) + NVL(CTE9.DISTRI_CN, 0) - NVL(CASE WHEN t4.FVPL_APP != 'Y' THEN 0 ELSE t2.FVPL_FVCHANGE END, 0) + NVL(CASE WHEN t4.FVPL_APP != 'Y' THEN 0 ELSE t2.RE_FVPL_AMOUNT END, 0) + NVL(CASE WHEN t4.FVPL_APP != 'Y' THEN 0 ELSE t2.FVPL_AMOUNT END, 0) + NVL(CTE9.NON_CFC_DISPOSAL_ADJ, 0), 0) AS CFC_EARNINGS
	,t3.AVG_RATIO_HOLD
FROM CTE_EXEMPTION t1
LEFT JOIN CTE9 ON t1.INV_ENTITY_CODE = CTE9.CFC_ENTITY_CODE AND CTE9.PERIOD = TRUNC(t1.PERIOD, 'DD') AND t1.SCENARIO = CTE9.SCENARIO
LEFT JOIN CTE_OTHER_AMOUNT t2 ON t1.PERIOD = t2.PERIOD AND t1.INV_ENTITY_CODE = t2.INV_ENTITY_CODE AND t1.SCENARIO = t2.SCENARIO
LEFT JOIN CTE_RATIO_HOLD t3 ON t1.ENTITY_CODE = t3.ENTITY_CODE AND t1.PERIOD = t3.PERIOD AND t1.INV_ENTITY_CODE = t3.INV_ENTITY_CODE
LEFT JOIN CTE_FVPL t4 ON t4.PERIOD = TO_CHAR(t1.PERIOD, 'YYYY-MM') AND t1.ENTITY_CODE = t4.ENTITY_CODE
;


-- TRSDB.V_TRS_FACT_CFC_TAX_INCOME_TOTAL source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_TAX_INCOME_TOTAL" ("ENTITY_CODE", "INV_ENTITY_CODE", "PERIOD", "SCENARIO", "SUB_OPE_EXEMPTION", "COUNTRY_ID", "LOCAL_CURRENCY_ID", "ACCUMULATED_AMOUNT", "AMOUNT_TOTAL", "REALIZED_LOSS", "DISTRI_NONCN", "DISTRI_CN", "LIMIT_ITEMS", "FVPL_FVCHANGE", "DESPITE_PROFIT", "FVPL_AMOUNT", "RE_FVPL_AMOUNT", "NON_CFC_DISPOSAL_ADJ", "TAX_INC_BEFORE_RATIO", "RATIO_HOLD", "TAX_INC", "DEDUCTION", "CFC_EARNINGS", "FVPL_APP") AS 
  WITH CTE_THIS_YEAR AS(
SELECT
	SUM(DEDUCTION) AS DEDUCTION,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	PERIOD,
	FISCAL_YEAR
FROM V_TRS_CFC_10Y_DEDUCTION_DETAIL
WHERE CATEGORY = '0' AND TRUNC(PERIOD, 'YYYY') = TRUNC(DEDUCTED_YEAR, 'YYYY')
GROUP BY PERIOD, SCENARIO, ENTITY_CODE, CFC_ENTITY_CODE, FISCAL_YEAR
), CTE_LIMIT AS (
--	自”限制分配狀況”頁面取數，加總金額；若該CFC為實質營運，則顯示空白
	SELECT
		t1.PERIOD,
		t1.SCENARIO,
		t1.ENTITY_CODE AS CFC_ENTITY_CODE,
		SUM(t1.AMOUNT) AS LIMIT_ITEMS
	FROM V_TRS_FACT_CFC_RESTRICTED_DISTRIBUTION t1
	WHERE 1 = 1
		AND ITEM != 'SPECIAL_RESERVE_NREGU'
		AND TO_CHAR(t1.PERIOD, 'YYYY') = t1.ORIGIN_YEAR
	GROUP BY t1.PERIOD, t1.SCENARIO, t1.ENTITY_CODE
)
SELECT
	t1.ENTITY_CODE,
	t1.INV_ENTITY_CODE,
	t1.PERIOD,
	t1.SCENARIO,
	t1.SUB_OPE_EXEMPTION,
	t1.COUNTRY_ID,
	t1.LOCAL_CURRENCY_ID,
	t1.ACCUMULATED_AMOUNT,
	t1.AMOUNT_TOTAL,
	t1.REALIZED_LOSS,
	t1.DISTRI_NONCN,
	t1.DISTRI_CN,
	t2.LIMIT_ITEMS,
	t1.FVPL_FVCHANGE,
	t1.DESPITE_PROFIT,
	t1.FVPL_AMOUNT,
	t1.RE_FVPL_AMOUNT,
	t1.NON_CFC_DISPOSAL_ADJ,
	TRUNC(t1.CFC_EARNINGS - NVL(t4.DEDUCTION, 0) - NVL(t2.LIMIT_ITEMS, 0), 0) AS TAX_INC_BEFORE_RATIO,
	t1.AVG_RATIO_HOLD AS RATIO_HOLD,
	TRUNC((t1.CFC_EARNINGS - NVL(t4.DEDUCTION, 0) - NVL(t2.LIMIT_ITEMS, 0)) * t1.AVG_RATIO_HOLD, 0)AS TAX_INC,
	t4.DEDUCTION,
	t1.CFC_EARNINGS,
	t1.FVPL_APP
FROM V_TRS_FACT_CFC_TAX_INCOME t1
LEFT JOIN CTE_THIS_YEAR t4 ON t4.PERIOD = t1.PERIOD AND t1.SCENARIO = t4.SCENARIO AND t1.ENTITY_CODE = t4.ENTITY_CODE AND t1.INV_ENTITY_CODE = t4.CFC_ENTITY_CODE
LEFT JOIN CTE_LIMIT T2 ON T1.SCENARIO = T2.SCENARIO AND T1.INV_ENTITY_CODE = T2.CFC_ENTITY_CODE AND T1.PERIOD = T2.PERIOD
;

-- TRSDB.V_TRS_FACT_COUNTRY_TAX source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_COUNTRY_TAX" ("COUNTRY_CODE", "COUNTRY_TAX_ID", "TAX_RATE", "START_DATE", "END_DATE", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME", "IS_LOWTAX") AS 
  SELECT DISTINCT t1.COUNTRY_CODE,
t2.COUNTRY_TAX_ID ,
t2.TAX_RATE ,
t2.START_DATE ,
t2.END_DATE ,
t2.CREATED_BY ,
t2.CREATED_TIME ,
t2.UPDATED_BY ,
t2.UPDATED_TIME ,
t2.IS_LOWTAX 
FROM V_TRS_DIM_COUNTRY t1
LEFT JOIN TRSDB.TRS_FACT_COUNTRY_TAX t2
ON t1.COUNTRY_CODE = t2.COUNTRY_CODE 
;


-- TRSDB.V_TRS_FACT_CURRENCY source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CURRENCY" ("CURRENCY_FACT_ID", "CURRENCY_ID", "TARGET_CURRENCY_ID", "EXCHANGE_RATIO", "PERIOD", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME") AS 
  SELECT 
CURRENCY_FACT_ID ,
CURRENCY_ID ,
TARGET_CURRENCY_ID ,
EXCHANGE_RATIO ,
PERIOD,
CREATED_BY ,
CREATED_TIME ,
UPDATED_BY ,
UPDATED_TIME 
FROM trs_fact_currency
UNION ALL
SELECT DISTINCT
'dummy' AS CURRENCY_FACT_ID,
CURRENCY_ID ,
CAST(CURRENCY_ID AS NVARCHAR2(255)) AS TARGET_CURRENCY_ID ,
1 AS EXCHANGE_RATIO ,
PERIOD,
CAST('dummy'AS NVARCHAR2(255)) AS CREATED_BY ,
CAST(SYSDATE AS DATE) AS CREATED_TIME ,
CAST('dummy'AS NVARCHAR2(255)) AS UPDATED_BY ,
CAST(SYSDATE AS DATE) AS UPDATED_TIME 
FROM trs_fact_currency
;





-- TRSDB.V_TRS_FACT_EXCHANGE_BANKOFTW source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_EXCHANGE_BANKOFTW" ("PERIOD", "CURRENCY_FACT_ID", "CURRENCY_ID", "TARGET_CURRENCY_ID", "YEAR", "MONTH", "SCENARIO", "EXCHANGE_RATIO", "AVG_EXCHANGE_RATIO", "CREATED_BY", "CREATED_TIME", "UPDATED_BY", "UPDATED_TIME") AS 
  WITH v1 AS (
  SELECT t.*, SUBSTR(t.period, 1, 4) AS YEAR,
  SUBSTR(t.period, 6, 2) AS month
  FROM TRS_FACT_EXCHANGE_BANKOFTW t
)
,v2 AS (
  SELECT
    t.period,
    t.CURRENCY_FACT_ID,
    t.CURRENCY_ID,
    t.TARGET_CURRENCY_ID,
    t.Year,
    t.MONTH,
    t.exchange_ratio,
    t.SCENARIO,
	t.CREATED_BY,
	t.CREATED_TIME,
	t.UPDATED_BY,
	t.UPDATED_TIME,
    sum(1) over(PARTITION BY t.YEAR,t.CURRENCY_ID,t.TARGET_CURRENCY_ID,t.SCENARIO order by t.period) as cnt_base,
    sum(t.exchange_ratio) over(PARTITION BY t.YEAR,t.CURRENCY_ID,t.TARGET_CURRENCY_ID,t.SCENARIO order by t.period) as sum_ratio
  FROM v1 t
)
,v3 AS (
 SELECT DISTINCT 
 	period,	
 	CURRENCY_ID,
 	Year,
 	MONTH,
 	SCENARIO
 	FROM V2
)
,v4 AS (
SELECT 
    t.period,
    t.CURRENCY_FACT_ID,
    t.CURRENCY_ID,
    t.TARGET_CURRENCY_ID,
    t.Year,
    t.MONTH,
     t.SCENARIO,
    t.exchange_ratio,
    round(t.sum_ratio/t.cnt_base,5) AS AVG_EXCHANGE_RATIO,
	t.CREATED_BY,
	t.CREATED_TIME,
	t.UPDATED_BY,
	t.UPDATED_TIME
    FROM v2 t
    WHERE NVL(t.CURRENCY_ID,0) <> NVL(t.TARGET_CURRENCY_ID,0)
UNION ALL
   SELECT	
   period,	
   NULL AS CURRENCY_FACT_ID,
 	CURRENCY_ID,
 	CURRENCY_ID AS TARGET_CURRENCY_ID, 
 	Year,
 	MONTH,
 	SCENARIO,
 	1 AS exchange_ratio,
    1 AS AVG_EXCHANGE_RATIO,
	NULL AS CREATED_BY,
	NULL AS CREATED_TIME,
	NULL AS UPDATED_BY,
	NULL AS UPDATED_TIME
 	FROM V3
UNION ALL
   SELECT DISTINCT
   period,	
   NULL AS CURRENCY_FACT_ID,
 	 u'NTD' AS CURRENCY_ID,
 	 u'NTD' AS TARGET_CURRENCY_ID, 
 	Year,
 	MONTH,
 	SCENARIO,
 	1 AS exchange_ratio,
    1 AS AVG_EXCHANGE_RATIO,
	NULL AS CREATED_BY,
	NULL AS CREATED_TIME,
	NULL AS UPDATED_BY,
	NULL AS UPDATED_TIME
 	FROM V3
 )
 SELECT DISTINCT "PERIOD","CURRENCY_FACT_ID","CURRENCY_ID","TARGET_CURRENCY_ID","YEAR","MONTH","SCENARIO","EXCHANGE_RATIO","AVG_EXCHANGE_RATIO","CREATED_BY","CREATED_TIME","UPDATED_BY","UPDATED_TIME" FROM v4;



-- TRSDB.V_TRS_FACT_PASSIVE_INCOME_TOTAL source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_PASSIVE_INCOME_TOTAL" ("ID", "PERIOD", "SCENARIO", "IS_LOWTAX", "COUNTRY_ID", "ENTITY_CODE", "INV_ENTITY_CODE", "INV_INCOME", "DIV_INCOME", "INT_INCOME", "ROY_INCOME", "RENT_INCOME", "SALE_ASSETS_GAIN", "TOTAL_OPE_INCOME", "TOTAL_NONOPE_INCOME", "INV_INCOME_ADJ", "DIV_INCOME_ADJ", "INT_INCOME_ADJ", "ROY_INCOME_ADJ", "RENT_INCOME_ADJ", "SELF_DEV_ROY_ADJ", "SELF_DEV_RENT_ADJ", "SELF_DEV_GAIN_ADJ", "SALE_ASSETS_GAIN_ADJ", "TOTAL_OPE_INCOME_ADJ", "TOTAL_NONOPE_INCOME_ADJ", "INV_INCOME_TOTAL", "DIV_INCOME_TOTAL", "INT_INCOME_TOTAL", "ROY_INCOME_TOTAL", "RENT_INCOME_TOTAL", "SALE_ASSETS_GAIN_TOTAL", "SELF_DEV_ROY_TOTAL", "SELF_DEV_RENT_TOTAL", "SELF_DEV_GAIN_TOTAL", "TOTAL_NUMERATOR_TOTAL", "TOTAL_OPE_INCOME_TOTAL", "TOTAL_NONOPE_INCOME_TOTAL", "TOTAL_DENOMINATOR_TOTAL", "PASSIVE_RATIO_TOTAL") AS 
  WITH mv as(
SELECT
    T1.PERIOD,
    T1.MONTH,
    T1.CURRENT_CODE,
    T1.SCENARIO,
    T1.T5_CODE,
    T1.T5_NAME,
    T1.T4_CODE,
    T1.T4_NAME,
    T1.T5_DEBIT_CREDIT,
    T1.T4_DEBIT_CREDIT,
    T1.T3_CODE,
    T1.T3_NAME,
    T1.T3_DEBIT_CREDIT,
    T1.ACCUMULATED_AMOUNT_ORI * T3.AVG_EXCHANGE_RATIO AS ACCUMULATED_AMOUNT_ORI
FROM MV_TRS_TB_ACTUAL_ACCOUNT_AMOUNT t1
JOIN TRS_FACT_COUNTRY_TAX t2 ON t1.COUNTRY_ID = t2.COUNTRY_CODE AND t2.IS_LOWTAX = 'true' AND LAST_DAY(TO_DATE(T1.PERIOD || '-' || LPAD(T1.MONTH,2,0), 'yyyy-MM')) BETWEEN T2.START_DATE AND T2.END_DATE
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW T3 ON (T1.PERIOD || '-' || LPAD(T1.MONTH,2,0)) = T3.PERIOD AND T1.CURRENCY_CODE = T3.CURRENCY_ID AND TARGET_CURRENCY_ID = 'NTD' AND T1.SCENARIO = T3.SCENARIO
)
,CTE0 AS (
SELECT
	PERIOD || '-' || LPAD(MONTH,2,0) AS PERIOD,
	CURRENT_CODE AS ENTITY_CODE,
    SCENARIO,
	T5_CODE AS ACCOUNT_CODE,
	T5_NAME AS NAME,
	T5_DEBIT_CREDIT AS DEBIT_CREDIT,
	ACCUMULATED_AMOUNT_ORI
FROM mv
WHERE 
	SUBSTR(T5_CODE, 0, 1) = '4'
UNION ALL
SELECT
	PERIOD || '-' || LPAD(MONTH,2,0) AS PERIOD,
	CURRENT_CODE AS ENTITY_CODE,
    SCENARIO,
	T4_CODE AS ACCOUNT_CODE,
	T4_NAME AS NAME,
	T4_DEBIT_CREDIT AS DEBIT_CREDIT,
	ACCUMULATED_AMOUNT_ORI
FROM mv 
WHERE 
	SUBSTR(T4_CODE, 0, 1) = '4'
	AND T5_CODE IS NULL
UNION ALL
SELECT
	PERIOD || '-' || LPAD(MONTH,2,0) AS PERIOD,
	CURRENT_CODE AS ENTITY_CODE,
    SCENARIO,
	T3_CODE AS ACCOUNT_CODE,
	T3_NAME AS NAME,
	T3_DEBIT_CREDIT AS DEBIT_CREDIT,
	ACCUMULATED_AMOUNT_ORI
FROM mv
WHERE 
	SUBSTR(T3_CODE, 0, 1) = '4'
	AND T4_CODE IS NULL
UNION ALL
SELECT
	PERIOD || '-' || LPAD(MONTH,2,0) AS PERIOD,
	CURRENT_CODE AS ENTITY_CODE,
    SCENARIO,
	T5_CODE AS ACCOUNT_CODE,
	T5_NAME AS NAME,
	T5_DEBIT_CREDIT AS DEBIT_CREDIT,
	ACCUMULATED_AMOUNT_ORI
FROM mv
WHERE 
	SUBSTR(T5_CODE, 0, 1) = '7'
UNION ALL
SELECT
	PERIOD || '-' || LPAD(MONTH,2,0) AS PERIOD,
	CURRENT_CODE AS ENTITY_CODE,
    SCENARIO,
	T4_CODE AS ACCOUNT_CODE,
	T4_NAME AS NAME,
	T4_DEBIT_CREDIT AS DEBIT_CREDIT,
	ACCUMULATED_AMOUNT_ORI
FROM mv
WHERE 
	SUBSTR(T4_CODE, 0, 1) = '7'
	AND T5_CODE IS NULL
UNION ALL
SELECT
	PERIOD || '-' || LPAD(MONTH,2,0) AS PERIOD,
	CURRENT_CODE AS ENTITY_CODE,
    SCENARIO,
	T3_CODE AS ACCOUNT_CODE,
	T3_NAME AS NAME,
	T3_DEBIT_CREDIT AS DEBIT_CREDIT,
	ACCUMULATED_AMOUNT_ORI
FROM mv
WHERE 
	SUBSTR(T3_CODE, 0, 1) = '7'
	AND T4_CODE IS NULL
),CTE AS (
SELECT
	PERIOD,
	ENTITY_CODE,
    SCENARIO,	
	ACCOUNT_CODE,
	NAME,
	DEBIT_CREDIT,
	CASE WHEN DEBIT_CREDIT = 'C' THEN ACCUMULATED_AMOUNT_ORI * -1 ELSE ACCUMULATED_AMOUNT_ORI END AS ACCUMULATED_AMOUNT_ORI
FROM CTE0
),CTE2 AS (
SELECT
	PERIOD,
	ENTITY_CODE,
    SCENARIO,
	SUM(CASE WHEN ACCOUNT_CODE IN ('7011', '7232', '7235', '7240', '730A', '730B', '730C', '730D', '730E', '730F', '7350', '7360', '7361', '7370', '7375') THEN ACCUMULATED_AMOUNT_ORI ELSE 0 END) AS INV_INCOME,
	SUM(CASE WHEN ACCOUNT_CODE IN ('7130') THEN ACCUMULATED_AMOUNT_ORI ELSE 0 END) AS DIV_INCOME,
	SUM(CASE WHEN ACCOUNT_CODE IN ('7101', '7102', '7105', '7106', '7107') THEN ACCUMULATED_AMOUNT_ORI ELSE 0 END) AS INT_INCOME,
	SUM(CASE WHEN ACCOUNT_CODE IN ('7120', '651C') THEN ACCUMULATED_AMOUNT_ORI ELSE 0 END) AS ROY_INCOME,
	SUM(CASE WHEN ACCOUNT_CODE IN ('7110', '651A') THEN ACCUMULATED_AMOUNT_ORI ELSE 0 END) AS RENT_INCOME,
	SUM(CASE WHEN ACCOUNT_CODE IN ('7210', '7215', '7220', '7225', '7229', '651B') THEN ACCUMULATED_AMOUNT_ORI ELSE 0 END) AS SALE_ASSETS_GAIN
FROM CTE
GROUP BY PERIOD, SCENARIO, ENTITY_CODE
), CTE_INV_CONTROL AS (
SELECT
	T1.ID,
	T1.PERIOD,
	T2.CURRENT_CODE AS ENTITY_CODE,
	T3.CURRENT_CODE AS INV_ENTITY_CODE
FROM TRS_FACT_INV_CONTROL T1
JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.ENTITY_CODE = T2.ENTITY_CODE
JOIN V_TRS_DIM_ENTITY_CUR T3 ON T1.INV_ENTITY_CODE = T3.ENTITY_CODE
WHERE RATIO_DIRECT != 0
), HEAD AS (
SELECT
	t1.ID,
	t0.PERIOD,
	t0.ENTITY_CODE,
	t0.SCENARIO,
	t1.INV_ENTITY_CODE,
	t3.COUNTRY_ID,
	t4.IS_LOWTAX,
	t5.COUNTRY_ID AS COMPANY_COUNTRY
FROM V_TRS_FACT_CFC_ENTITY_VERSION t0
JOIN CTE_INV_CONTROL t1 ON t0.PERIOD = t1.PERIOD AND t0.ENTITY_CODE = t1.ENTITY_CODE
LEFT JOIN TRS_DIM_COMPANY t3 ON t1.INV_ENTITY_CODE = t3.COMPANY_CODE
JOIN TRS_FACT_COUNTRY_TAX t4 ON t3.COUNTRY_ID = t4.COUNTRY_CODE AND t4.IS_LOWTAX = 'true' AND T0.PERIOD BETWEEN T4.START_DATE AND T4.END_DATE 
JOIN TRS_DIM_ENTITY t5 ON t0.ENTITY_CODE = t5.ENTITY_CODE AND t5.COUNTRY_ID = 'TW'
),
CTE3_0 AS (
SELECT
	PERIOD || '-' || LPAD(MONTH,2,0) AS PERIOD,
	CURRENT_CODE AS ENTITY_CODE,
    SCENARIO,
	T5_CODE AS ACCOUNT_CODE,
	T5_NAME AS NAME,
	T5_DEBIT_CREDIT AS DEBIT_CREDIT,
	ACCUMULATED_AMOUNT_ORI
FROM mv
WHERE 
	SUBSTR(T5_CODE, 0, 1) = '4'
UNION ALL
SELECT
	PERIOD || '-' || LPAD(MONTH,2,0) AS PERIOD ,
	CURRENT_CODE AS ENTITY_CODE,
    SCENARIO,
	T4_CODE AS ACCOUNT_CODE,
	T4_NAME AS NAME,
	T4_DEBIT_CREDIT AS DEBIT_CREDIT,
	ACCUMULATED_AMOUNT_ORI
FROM mv
WHERE 
	SUBSTR(T4_CODE, 0, 1) = '4'
	AND T5_CODE IS NULL
UNION ALL
SELECT
	PERIOD || '-' || LPAD(MONTH,2,0) AS PERIOD ,
	CURRENT_CODE AS ENTITY_CODE,
    SCENARIO,
	T3_CODE AS ACCOUNT_CODE,
	T3_NAME AS NAME,
	T3_DEBIT_CREDIT AS DEBIT_CREDIT,
	ACCUMULATED_AMOUNT_ORI
FROM mv
WHERE 
	SUBSTR(T3_CODE, 0, 1) = '4'
	AND T4_CODE IS NULL
UNION ALL
SELECT
	PERIOD || '-' || LPAD(MONTH,2,0) AS PERIOD ,
	CURRENT_CODE AS ENTITY_CODE,
    SCENARIO,
	T5_CODE AS ACCOUNT_CODE,
	T5_NAME AS NAME,
	T5_DEBIT_CREDIT AS DEBIT_CREDIT,
	ACCUMULATED_AMOUNT_ORI
FROM mv
WHERE 
	SUBSTR(T5_CODE, 0, 1) = '7'
UNION ALL
SELECT
	PERIOD || '-' || LPAD(MONTH,2,0) AS PERIOD,
	CURRENT_CODE AS ENTITY_CODE,
    SCENARIO,
	T4_CODE AS ACCOUNT_CODE,
	T4_NAME AS NAME,
	T4_DEBIT_CREDIT AS DEBIT_CREDIT,
	ACCUMULATED_AMOUNT_ORI
FROM mv
WHERE 
	SUBSTR(T4_CODE, 0, 1) = '7'
	AND T5_CODE IS NULL
UNION ALL
SELECT
	PERIOD || '-' || LPAD(MONTH,2,0) AS PERIOD,
	CURRENT_CODE AS ENTITY_CODE,
    SCENARIO,
	T3_CODE AS ACCOUNT_CODE,
	T3_NAME AS NAME,
	T3_DEBIT_CREDIT AS DEBIT_CREDIT,
	ACCUMULATED_AMOUNT_ORI
FROM mv
WHERE 
	SUBSTR(T3_CODE, 0, 1) = '7'
	AND T4_CODE IS NULL
),CTE3 AS (
SELECT
	PERIOD,
	ENTITY_CODE,
    SCENARIO,	
	ACCOUNT_CODE,
	NAME,
	DEBIT_CREDIT,
	CASE WHEN DEBIT_CREDIT = 'C' THEN ACCUMULATED_AMOUNT_ORI * -1 ELSE ACCUMULATED_AMOUNT_ORI END AS ACCUMULATED_AMOUNT_ORI
FROM CTE3_0
), TOTAL AS (
SELECT
	PERIOD,
	SCENARIO,
	ENTITY_CODE,
	SUM(CASE WHEN SUBSTR(ACCOUNT_CODE, 0, 1) = '4' THEN ACCUMULATED_AMOUNT_ORI ELSE 0 END) AS TOTAL_OPE_INCOME,
	SUM(CASE WHEN SUBSTR(ACCOUNT_CODE, 0, 1) = '7' AND DEBIT_CREDIT = 'C' AND ACCUMULATED_AMOUNT_ORI > 0 THEN ACCUMULATED_AMOUNT_ORI ELSE 0 END) - SUM(CASE WHEN ACCOUNT_CODE IN ('7233', '7630') AND ACCUMULATED_AMOUNT_ORI < 0 THEN ACCUMULATED_AMOUNT_ORI ELSE 0 END)AS TOTAL_NONOPE_INCOME
FROM CTE3
GROUP BY PERIOD, SCENARIO, ENTITY_CODE
)
, TB_RES AS (
SELECT
	HEAD.ID,
	HEAD.COUNTRY_ID,
	HEAD.ENTITY_CODE,
	HEAD.IS_LOWTAX,
	HEAD.PERIOD AS PERIOD,
    HEAD.SCENARIO,
	HEAD.INV_ENTITY_CODE,
	CTE2.INV_INCOME,
	CTE2.DIV_INCOME,
	CTE2.INT_INCOME,
	CTE2.ROY_INCOME,
	CTE2.RENT_INCOME,
	CTE2.SALE_ASSETS_GAIN,
    0 AS SELF_DEV_ROY,
    0 AS SELF_DEV_RENT,
    0 AS SELF_DEV_GAIN,
    CTE2.INV_INCOME + CTE2.DIV_INCOME + CTE2.INT_INCOME + CTE2.ROY_INCOME + CTE2.RENT_INCOME + CTE2.SALE_ASSETS_GAIN AS TOTAL_NUMERATOR,
    TOTAL.TOTAL_OPE_INCOME,
    TOTAL.TOTAL_NONOPE_INCOME,
    TOTAL.TOTAL_OPE_INCOME + TOTAL.TOTAL_NONOPE_INCOME AS TOTAL_DENOMINATOR
FROM HEAD
LEFT JOIN CTE2 ON HEAD.INV_ENTITY_CODE = CTE2.ENTITY_CODE AND TO_CHAR(HEAD.PERIOD,'YYYY-MM') = CTE2.PERIOD AND HEAD.SCENARIO = CTE2.SCENARIO
LEFT JOIN TOTAL ON CTE2.ENTITY_CODE = TOTAL.ENTITY_CODE AND CTE2.PERIOD = TOTAL.PERIOD AND CTE2.SCENARIO = TOTAL.SCENARIO
),CTE_ADJ AS (
SELECT
	T1.PERIOD,
	T2.CURRENT_CODE AS CFC_ENTITY_CODE,
	T1.SCENARIO,
	T1.INV_INCOME,
	T1.DIV_INCOME,
	T1.INT_INCOME ,
	T1.ROY_INCOME ,
	T1.RENT_INCOME ,
	T1.SALE_ASSETS_GAIN ,
	T1.SELF_DEV_ROY ,
	T1.SELF_DEV_RENT ,
	T1.SELF_DEV_GAIN ,
	T1.TOTAL_NUMERATOR ,
	T1.TOTAL_OPE_INCOME ,
	T1.TOTAL_NONOPE_INCOME ,
	T1.TOTAL_DENOMINATOR 
FROM TRS_FACT_PASSIVE_INCOME_ADJ T1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.CFC_ENTITY_CODE = T2.ENTITY_CODE 
)
SELECT 
	T1.ID,
	T1.PERIOD,
	T1.SCENARIO,
	T1.IS_LOWTAX,
	T1.COUNTRY_ID,
	T1.ENTITY_CODE,
	T1.INV_ENTITY_CODE,
	T1.INV_INCOME,
	T1.DIV_INCOME,
	T1.INT_INCOME,
	T1.ROY_INCOME,
	T1.RENT_INCOME,
	T1.SALE_ASSETS_GAIN,
	T1.TOTAL_OPE_INCOME,
	T1.TOTAL_NONOPE_INCOME,
	T2.INV_INCOME AS INV_INCOME_ADJ,
	T2.DIV_INCOME AS DIV_INCOME_ADJ,
	T2.INT_INCOME AS INT_INCOME_ADJ,
	T2.ROY_INCOME AS ROY_INCOME_ADJ,
	T2.RENT_INCOME AS RENT_INCOME_ADJ,
	T2.SELF_DEV_ROY AS SELF_DEV_ROY_ADJ,
    T2.SELF_DEV_RENT AS SELF_DEV_RENT_ADJ,
    T2.SELF_DEV_GAIN AS SELF_DEV_GAIN_ADJ,
	T2.SALE_ASSETS_GAIN AS SALE_ASSETS_GAIN_ADJ,
	T2.TOTAL_OPE_INCOME AS TOTAL_OPE_INCOME_ADJ,
	T2.TOTAL_NONOPE_INCOME AS TOTAL_NONOPE_INCOME_ADJ,
	T1.INV_INCOME + NVL(T2.INV_INCOME, 0) AS INV_INCOME_TOTAL,
	T1.DIV_INCOME + NVL(T2.DIV_INCOME, 0) AS DIV_INCOME_TOTAL,
	T1.INT_INCOME + NVL(T2.INT_INCOME, 0) AS INT_INCOME_TOTAL, 
	T1.ROY_INCOME + NVL(T2.ROY_INCOME, 0) AS ROY_INCOME_TOTAL,
	T1.RENT_INCOME + NVL(T2.RENT_INCOME, 0) AS RENT_INCOME_TOTAL,
	T1.SALE_ASSETS_GAIN + NVL(T2.SALE_ASSETS_GAIN, 0) AS SALE_ASSETS_GAIN_TOTAL,
	T1.SELF_DEV_ROY + NVL(T2.SELF_DEV_ROY, 0) AS SELF_DEV_ROY_TOTAL,
	T1.SELF_DEV_RENT + NVL(T2.SELF_DEV_RENT, 0) AS SELF_DEV_RENT_TOTAL,
	T1.SELF_DEV_GAIN + NVL(T2.SELF_DEV_GAIN, 0) AS SELF_DEV_GAIN_TOTAL,
	T1.TOTAL_NUMERATOR + NVL(T2.TOTAL_NUMERATOR, 0) AS TOTAL_NUMERATOR_TOTAL,
	T1.TOTAL_OPE_INCOME + NVL(T2.TOTAL_OPE_INCOME, 0) AS TOTAL_OPE_INCOME_TOTAL,
	T1.TOTAL_NONOPE_INCOME + NVL(T2.TOTAL_NONOPE_INCOME, 0)AS TOTAL_NONOPE_INCOME_TOTAL,
	T1.TOTAL_DENOMINATOR + NVL(T2.TOTAL_DENOMINATOR, 0) AS TOTAL_DENOMINATOR_TOTAL,
	TRUNC(CASE WHEN (T1.TOTAL_DENOMINATOR + NVL(T2.TOTAL_DENOMINATOR, 0)) IS NULL OR (T1.TOTAL_DENOMINATOR + NVL(T2.TOTAL_DENOMINATOR, 0)) = 0 THEN 1 ELSE
	(T1.TOTAL_NUMERATOR + NVL(T2.TOTAL_NUMERATOR, 0)) / (T1.TOTAL_DENOMINATOR + NVL(T2.TOTAL_DENOMINATOR, 0)) END , 4)AS PASSIVE_RATIO_TOTAL
FROM TB_RES T1
LEFT JOIN CTE_ADJ T2 ON T1.PERIOD = T2.PERIOD AND T1.INV_ENTITY_CODE = T2.CFC_ENTITY_CODE AND T1.SCENARIO = T2.SCENARIO
;


