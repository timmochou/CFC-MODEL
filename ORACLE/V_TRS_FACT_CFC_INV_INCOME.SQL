-- TRSDB.V_TRS_FACT_CFC_INV_INCOME source

CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRSDB"."V_TRS_FACT_CFC_INV_INCOME" ("PERIOD", "REC_YEAR", "ENTITY_CODE", "CFC_ENTITY_CODE", "SCENARIO", "FISCAL_YEAR", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9", "E10", "E11", "E12", "AVG_EXCHANGE_RATIO", "L_EXCHANGE_RATE_DATE", "DIVIDEND6", "DIVIDEND7") AS 
  WITH CTE_VERSION AS (
SELECT DISTINCT
	SCENARIO
FROM TRS_FACT_CFC_ENTITY_VERSION
),CTE_HEAD AS (
SELECT DISTINCT
	PERIOD,
	SCENARIO,
	ENTITY_CODE
FROM V_TRS_FACT_CFC_ENTITY_VERSION
),CTE_PERIOD AS (
SELECT DISTINCT
	PERIOD
FROM TRS_FACT_CFC_ENTITY_VERSION
), CTE_THIS_YEAR AS(
SELECT
	SUM(DEDUCTION) AS DEDUCTION,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	PERIOD,
	FISCAL_YEAR
FROM V_TRS_CFC_10Y_DEDUCTION_DETAIL
WHERE TRUNC(PERIOD, 'YYYY') = TRUNC(DEDUCTED_YEAR, 'YYYY')
GROUP BY PERIOD, SCENARIO, ENTITY_CODE, CFC_ENTITY_CODE, FISCAL_YEAR
)
,PROFIT000 AS (
SELECT
	t1.PERIOD,
	t1.SCENARIO,
	t1.ENTITY_CODE,
	t1.INV_ENTITY_CODE AS CFC_ENTITY_CODE,
	CASE WHEN t3.APPROVAL = 'true' AND t2.GAIN_LOSS = 'EARN' THEN t2.AMOUNT
	WHEN t3.APPROVAL = 'true' AND t2.GAIN_LOSS = 'LOSS' THEN t2.AMOUNT * -1
	ELSE t1.CFC_EARNINGS END AS CFC_EARNINGS,
	'PROFIT' AS DATA_TYPE,
	t1.AVG_RATIO_HOLD,
	CASE WHEN SUM(t1.CFC_EARNINGS) OVER(PARTITION BY t1.PERIOD, t1.SCENARIO, t1.ENTITY_CODE) >= 7000000 AND CFC_EARNINGS >= 0 THEN 'true'
	WHEN CFC_EARNINGS >= 7000000 THEN 'true' 
	WHEN ( CASE WHEN MONTHS_BETWEEN(t1.PERIOD, t4.START_DATE) + 1 < 12 AND TRUNC(SYSDATE, 'YYYY') > t4.START_DATE THEN CFC_EARNINGS * 12 / MONTHS_BETWEEN(t1.PERIOD, TRUNC(SYSDATE, 'YYYY')) +1 
	ELSE CFC_EARNINGS * 12 / MONTHS_BETWEEN(t1.PERIOD, t4.START_DATE) + 1 END) > 7000000 THEN 'true' --小於一年判斷是否從今年初計算全年
	ELSE 'false' END AS IS_TAX
FROM V_TRS_FACT_CFC_TAX_INCOME t1
LEFT JOIN V_TRS_FACT_CFC_APPROVAL_DETAIL t2 ON TO_CHAR(t1.PERIOD, 'YYYY') = t2.YEAR AND t1.SCENARIO = t2.SCENARIO AND t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.INV_ENTITY_CODE = t2.INV_ENTITY_CODE
LEFT JOIN V_TRS_FACT_CFC_APPROVAL t3 ON TO_CHAR(t1.PERIOD, 'YYYY-MM-DD') = (t3.YEAR || '-12-31') AND t1.ENTITY_CODE = t3.ENTITY_CODE AND t1.SCENARIO = t3.SCENARIO
LEFT JOIN TRS_DIM_COMPANY t4 ON t1.INV_ENTITY_CODE = t4.COMPANY_CODE AND t4.START_DATE < t1.PERIOD
WHERE CFC_EARNINGS > 0 AND SUB_OPE_EXEMPTION = 'false' --非實質營運才參與計算
),PROFIT00 AS (
SELECT
	t1.PERIOD,
	t1.SCENARIO,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.CFC_EARNINGS,
	t1.DATA_TYPE,
	t1.AVG_RATIO_HOLD
FROM PROFIT000 t1
WHERE IS_TAX = 'true'
), CTE_LIMIT AS (
--	自”限制分配狀況”頁面取數，加總金額；若該CFC為實質營運，則顯示空白
	SELECT
		t1.PERIOD,
		t1.SCENARIO,
		t1.ENTITY_CODE AS CFC_ENTITY_CODE,
		NVL(SUM(t1.AMOUNT), 0) AS LIMIT_ITEMS
	FROM V_TRS_FACT_CFC_RESTRICTED_DISTRIBUTION t1
	WHERE 1 = 1
		AND ITEM != 'SPECIAL_RESERVE_NREGU'
		AND TO_CHAR(t1.PERIOD, 'YYYY') = t1.ORIGIN_YEAR
	GROUP BY t1.PERIOD, t1.SCENARIO, t1.ENTITY_CODE
)
,PROFIT0 AS (
SELECT
	t1.PERIOD,
	t1.SCENARIO,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.DATA_TYPE,
	(t1.CFC_EARNINGS - NVL(t4.DEDUCTION, 0) - NVL(t2.LIMIT_ITEMS, 0)) * t1.AVG_RATIO_HOLD AS CFC_EARNINGS 
FROM PROFIT00 t1
LEFT JOIN CTE_THIS_YEAR t4 ON t1.PERIOD = t4.PERIOD AND t1.SCENARIO = t4.SCENARIO AND t1.ENTITY_CODE = t4.ENTITY_CODE AND t1.CFC_ENTITY_CODE = t4.CFC_ENTITY_CODE
LEFT JOIN CTE_LIMIT T2 ON T1.SCENARIO = T2.SCENARIO AND T1.CFC_ENTITY_CODE = T2.CFC_ENTITY_CODE AND T1.PERIOD = T2.PERIOD
)
,CTE_PA AS (
SELECT
	t1.PERIOD,
	t2.SCENARIO,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.CFC_EARNINGS,
	t1.DATA_TYPE
FROM PROFIT0 t1
CROSS JOIN CTE_VERSION t2
WHERE t1.SCENARIO = 'Per Audit' AND TO_CHAR(t1.PERIOD, 'MM-DD') = '12-31'
),PROFIT AS (
SELECT
	t1.PERIOD,
	t2.PERIOD AS PERIOD1,
	t2.SCENARIO,
	t1.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,
	t2.CFC_EARNINGS,
	t2.DATA_TYPE
FROM CTE_HEAD t1
JOIN CTE_PA t2 ON t1.PERIOD > t2.PERIOD AND t1.SCENARIO = t2.SCENARIO AND t1.ENTITY_CODE = t2.ENTITY_CODE
WHERE ROWNUM <= 1000000
UNION ALL
SELECT
	t1.PERIOD,
	t2.PERIOD AS PERIOD1,
	t2.SCENARIO,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,
	t2.CFC_EARNINGS,
	t2.DATA_TYPE
FROM CTE_PERIOD t1
JOIN PROFIT0 t2 ON t1.PERIOD = t2.PERIOD
WHERE ROWNUM <= 1000000
),CTE_DIVIDEND_CUR AS (
SELECT
	t1.FISCAL_YEAR,
	t2.CURRENT_CODE AS ENTITY_CODE,
	t3.CURRENT_CODE AS CFC_ENTITY_CODE,
	t1.CURRENCY_ID,
	t1.SCENARIO,
	t1.DECLARATION_DATE,
	t1.NON_CHINA_DIVIDEND_PROFIT,
	t1.CHINA_DIVIDEND_PROFIT
FROM TRS_FACT_CFC_DIVIDEND T1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.ENTITY_CODE = T2.ENTITY_CODE 
LEFT JOIN V_TRS_DIM_ENTITY_CUR T3 ON T1.CFC_ENTITY_CODE = T3.ENTITY_CODE 
)
, CTE_DIVIDEND1 AS (
SELECT
	t2.FISCAL_YEAR,
	t1.period,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,
	t2.CURRENCY_ID,
	t1.SCENARIO,
	t2.DECLARATION_DATE,
	t2.NON_CHINA_DIVIDEND_PROFIT,
	t2.CHINA_DIVIDEND_PROFIT
FROM CTE_HEAD t1
LEFT JOIN CTE_DIVIDEND_CUR t2 ON t1.ENTITY_CODE = t2.ENTITY_CODE
WHERE t2.SCENARIO = 'Per Audit' AND t2.DECLARATION_DATE < TRUNC(t1.period, 'YYYY')
UNION ALL
SELECT
	t2.FISCAL_YEAR,
	t1.period,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,
	t2.CURRENCY_ID,
	t1.SCENARIO,
	t2.DECLARATION_DATE,
	t2.NON_CHINA_DIVIDEND_PROFIT,
	t2.CHINA_DIVIDEND_PROFIT
FROM CTE_HEAD t1
LEFT JOIN CTE_DIVIDEND_CUR t2 ON t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.SCENARIO = t2.SCENARIO
WHERE  t2.DECLARATION_DATE BETWEEN TRUNC(t1.period, 'YYYY') AND t1.period
)
/*, CTE_DIVIDEND1 AS (
SELECT
	t1.PERIOD,
	t2.DECLARATION_DATE ,
	t1.SCENARIO,
	t2.CURRENCY_ID,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,
	t2.DECLARATION_DATE,
	t2.FISCAL_YEAR,
	t2.NON_CHINA_DIVIDEND_PROFIT,
	t2.CHINA_DIVIDEND_PROFIT
FROM CTE_HEAD t1
JOIN CTE_DIVIDEND0 t2 ON t1.PERIOD > t2.DECLARATION_DATE AND t1.SCENARIO = t2.SCENARIO AND t1.ENTITY_CODE = t2.CFC_ENTITY_CODE
UNION ALL
SELECT
	t1.PERIOD,
	t2.DECLARATION_DATE AS PERIOD1,
	t2.SCENARIO,
	t2.CURRENCY_ID,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,
	t2.DECLARATION_DATE,
	t2.FISCAL_YEAR,
	t2.NON_CHINA_DIVIDEND_PROFIT,
	t2.CHINA_DIVIDEND_PROFIT
FROM CTE_PERIOD t1
JOIN CTE_DIVIDEND0 t2 ON t1.PERIOD = t2.DECLARATION_DATE
)*/--SELECT * FROM CTE_DIVIDEND1
,DIVIDEND AS (
SELECT
	t1.PERIOD,
	t1.DECLARATION_DATE AS PERIOD1,
	t1.DECLARATION_DATE,
	t1.SCENARIO,
	t1.FISCAL_YEAR,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.NON_CHINA_DIVIDEND_PROFIT * t2.RATIO_HOLD * 	CASE WHEN t1.DECLARATION_DATE<= TRUNC(SYSDATE,'YYYY') THEN t5.AVG_EXCHANGE_RATIO
	WHEN TO_CHAR(t1.PERIOD, 'YYYY') > t1.FISCAL_YEAR THEN t3.AVG_EXCHANGE_RATIO ELSE t4.AVG_EXCHANGE_RATIO END AS DIVIDEND,
	'DIVIDEND' AS DATA_TYPE,
	'0' AS CHINA
FROM CTE_DIVIDEND1 t1
LEFT JOIN TRS_FACT_GROUP_INV_REL t2 ON t1.CFC_ENTITY_CODE = t2.INV_ENTITY_CODE AND t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.DECLARATION_DATE BETWEEN t2.START_DATE AND t2.END_DATE
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t3 ON t1.CURRENCY_ID = t3.CURRENCY_ID AND t3.TARGET_CURRENCY_ID = 'NTD' AND t1.SCENARIO = t3.SCENARIO AND t1.FISCAL_YEAR || '-12' = t3.PERIOD
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t4 ON t1.CURRENCY_ID = t4.CURRENCY_ID AND t4.TARGET_CURRENCY_ID = 'NTD' AND t1.SCENARIO = t4.SCENARIO AND TO_CHAR(t1.PERIOD, 'YYYY-MM') = t4.PERIOD
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t5 ON t1.CURRENCY_ID = t5.CURRENCY_ID AND t5.TARGET_CURRENCY_ID = 'NTD' AND t5.SCENARIO = 'Per Audit' AND t1.FISCAL_YEAR || '-12' = t5.PERIOD
WHERE NON_CHINA_DIVIDEND_PROFIT IS NOT NULL AND NON_CHINA_DIVIDEND_PROFIT > 0
UNION ALL
SELECT
	t1.PERIOD,
	t1.DECLARATION_DATE AS PERIOD1,
	t1.DECLARATION_DATE,
	t1.SCENARIO,
	t1.FISCAL_YEAR,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.CHINA_DIVIDEND_PROFIT * t2.RATIO_HOLD * CASE WHEN t1.DECLARATION_DATE<= TRUNC(SYSDATE,'YYYY') THEN t5.AVG_EXCHANGE_RATIO
	WHEN TO_CHAR(t1.PERIOD, 'YYYY') > t1.FISCAL_YEAR THEN t3.AVG_EXCHANGE_RATIO ELSE t4.AVG_EXCHANGE_RATIO END AS DIVIDEND,
	'DIVIDEND' AS DATA_TYPE,
	'1' AS CHINA
FROM CTE_DIVIDEND1 t1
LEFT JOIN TRS_FACT_GROUP_INV_REL t2 ON t1.CFC_ENTITY_CODE = t2.INV_ENTITY_CODE AND t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.DECLARATION_DATE BETWEEN t2.START_DATE AND t2.END_DATE
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t3 ON t1.CURRENCY_ID = t3.CURRENCY_ID AND t3.TARGET_CURRENCY_ID = 'NTD' AND t1.SCENARIO = t3.SCENARIO AND t1.FISCAL_YEAR || '-12' = t3.PERIOD
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t4 ON t1.CURRENCY_ID = t4.CURRENCY_ID AND t4.TARGET_CURRENCY_ID = 'NTD' AND t1.SCENARIO = t4.SCENARIO AND TO_CHAR(t1.PERIOD, 'YYYY-MM') = t4.PERIOD
LEFT JOIN V_TRS_FACT_EXCHANGE_BANKOFTW t5 ON t1.CURRENCY_ID = t5.CURRENCY_ID AND t5.TARGET_CURRENCY_ID = 'NTD' AND t5.SCENARIO = 'Per Audit' AND t1.FISCAL_YEAR || '-12' = t5.PERIOD
WHERE CHINA_DIVIDEND_PROFIT IS NOT NULL AND CHINA_DIVIDEND_PROFIT > 0
)--SELECT * FROM DIVIDEND
,SECURITY_CUR AS(
SELECT 
t1.INV_SECURITY_CODE,
t2.CURRENT_CODE
FROM TRS_DIM_INV_SECURITY t1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.CORR_COMPANY_ID = T2.ENTITY_CODE
),CTE_INV_DETAIL AS (
SELECT
	T1.PERIOD,
	T1.SERIAL,
	T2.CURRENT_CODE AS ENTITY_CODE,
	NVL(T3.CURRENT_CODE, t1.INV_SECURITY_CODE) AS INV_SECURITY_CODE,
	INV_ADJITEM_CODE,
	SHARE_QTY
FROM TRS_FACT_INV_DETAIL T1
LEFT JOIN V_TRS_DIM_ENTITY_CUR T2 ON T1.ENTITY_CODE = T2.ENTITY_CODE
LEFT JOIN SECURITY_CUR T3 ON T1.INV_SECURITY_CODE = T3.INV_SECURITY_CODE
)
,SHARES AS (
SELECT
	PERIOD,
	SERIAL,
	ENTITY_CODE,
	INV_SECURITY_CODE AS CFC_ENTITY_CODE,
	INV_ADJITEM_CODE,
	SHARE_QTY,
	'SHARES' AS DATA_TYPE
FROM CTE_INV_DETAIL
),SHARE_ORD AS(
	SELECT 
	ROW_NUMBER()OVER(PARTITION BY ENTITY_CODE,CFC_ENTITY_CODE ORDER BY PERIOD,SERIAL) AS ORDERS,
	PERIOD, ENTITY_CODE, CFC_ENTITY_CODE, INV_ADJITEM_CODE, SHARE_QTY, DATA_TYPE
	FROM SHARES
),SHARE_CHANGE(ORDERS, PERIOD, ENTITY_CODE,CFC_ENTITY_CODE,SHARE_QTY,ACC_SHARES,CHANGES,INV_ADJITEM_CODE, DATA_TYPE) AS(
SELECT 
	ORDERS,
	PERIOD, ENTITY_CODE,CFC_ENTITY_CODE,SHARE_QTY,
	0+SHARE_QTY AS ACC_SHARES,
	NULL AS CHANGES,
	INV_ADJITEM_CODE,
	DATA_TYPE
FROM SHARE_ORD 
WHERE ORDERS = 1
UNION ALL
SELECT 
	t.ORDERS,
	t.PERIOD, t.ENTITY_CODE,t.CFC_ENTITY_CODE,t.SHARE_QTY,
	t.SHARE_QTY+SHARE_CHANGE.ACC_SHARES AS ACC_SHARES,
	CASE WHEN SHARE_CHANGE.ACC_SHARES IS NULL OR SHARE_CHANGE.ACC_SHARES = 0 THEN 0 ELSE t.SHARE_QTY/SHARE_CHANGE.ACC_SHARES END AS CHANGES,
	t.INV_ADJITEM_CODE,
	t.DATA_TYPE
FROM SHARE_ORD t
JOIN SHARE_CHANGE ON t.ORDERS = SHARE_CHANGE.orders+1 AND t.ENTITY_CODE = SHARE_CHANGE.ENTITY_CODE AND t.CFC_ENTITY_CODE = SHARE_CHANGE.CFC_ENTITY_CODE
)
, SHARE_PERC AS (
SELECT
--	t2.ORDERS,
	t1.PERIOD,
	t2.PERIOD AS PERIOD1,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,SHARE_QTY,
	t2.ACC_SHARES,
	t2.CHANGES, 
	t2.INV_ADJITEM_CODE,
	t2.DATA_TYPE
FROM CTE_PERIOD t1
LEFT JOIN SHARE_CHANGE t2 ON t1.PERIOD > t2.PERIOD
WHERE CHANGES<0 AND t2.INV_ADJITEM_CODE LIKE 'disposed_%'
UNION ALL
SELECT
--	t2.ORDERS,
	t1.PERIOD,
	t2.PERIOD AS PERIOD1,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,SHARE_QTY,
	t2.ACC_SHARES,
	t2.CHANGES, 
	t2.INV_ADJITEM_CODE,
	t2.DATA_TYPE
FROM CTE_PERIOD t1
LEFT JOIN SHARE_CHANGE t2 ON t1.PERIOD = t2.PERIOD
WHERE CHANGES<0 AND INV_ADJITEM_CODE LIKE 'disposed_%'
), SHARE_PERC1 AS (
SELECT
	T1.PERIOD,
	T1.SCENARIO,
	t2.PERIOD1,
	t2.ENTITY_CODE,
	t2.CFC_ENTITY_CODE,SHARE_QTY,
	t2.ACC_SHARES,
	t2.CHANGES, 
	t2.INV_ADJITEM_CODE,
	t2.DATA_TYPE
FROM CTE_HEAD T1
JOIN SHARE_PERC T2 ON T1.PERIOD = T2.PERIOD AND T1.ENTITY_CODE = T2.ENTITY_CODE
)--SELECT * FROM SHARE_PERC1
,FISCAL_YEAR AS(
SELECT DISTINCT 
	PERIOD, SCENARIO,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
	TO_CHAR(PERIOD1,'yyyy') AS FISCAL_YEAR
FROM PROFIT
WHERE CFC_EARNINGS > 0
),T AS(
SELECT 
	FISCAL_YEAR,
	t2.PERIOD,
	t2.PERIOD1,
	TO_CHAR(T1.SCENARIO) AS SCENARIO,
	TO_CHAR(ENTITY_CODE) AS ENTITY_CODE,
	TO_CHAR(CFC_ENTITY_CODE) AS CFC_ENTITY_CODE,
	NULL AS AMOUNT,
	CHANGES,
	t2.DATA_TYPE,
	NULL AS CHINA
FROM FISCAL_YEAR t1
JOIN SHARE_PERC1 t2 ON t1.PERIOD = t2.PERIOD AND t2.PERIOD IS NOT NULL AND T1.SCENARIO = T2.SCENARIO
--
UNION ALL 
SELECT 
	TO_CHAR(PERIOD1,'yyyy') AS FISCAL_YEAR,
	PERIOD,
	PERIOD1,
	TO_CHAR(SCENARIO) AS SCENARIO,
	TO_CHAR(ENTITY_CODE),
	TO_CHAR(CFC_ENTITY_CODE),
	CFC_EARNINGS AS AMOUNT,
	NULL AS DELTA_CHANGE,
	DATA_TYPE,
	NULL AS CHINA
FROM PROFIT
--
UNION ALL
SELECT
	FISCAL_YEAR,
	PERIOD,
	PERIOD1,
	TO_CHAR(SCENARIO),
	TO_CHAR(ENTITY_CODE),
	TO_CHAR(CFC_ENTITY_CODE),
	DIVIDEND*-1 AS DIVIDEND,
	NULL AS DELTA_CHANGE,
	DATA_TYPE,
	CHINA
FROM DIVIDEND
)--SELECT * FROM T
,T_ORDER AS(
SELECT 
	ROW_NUMBER()OVER(PARTITION BY PERIOD, ENTITY_CODE,CFC_ENTITY_CODE,SCENARIO, FISCAL_YEAR ORDER BY PERIOD1 ,CASE WHEN DATA_TYPE = 'DIVIDEND' THEN 1
	WHEN DATA_TYPE = 'SHARES' THEN 2
	WHEN DATA_TYPE = 'PROFIT' THEN 3 END) AS ORDERS,
	FISCAL_YEAR,
	PERIOD,
	PERIOD1,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	AMOUNT,
	CHANGES,
	DATA_TYPE,
	CHINA
FROM T
)--SELECT * FROM T_ORDER WHERE TO_CHAR(PERIOD, 'YYYY-MM-DD') = '2024-06-30' AND SCENARIO = 'Per Audit' AND CFC_ENTITY_CODE = 'P00013_BVI' 
,DETAILS(ORDERS,FISCAL_YEAR,PERIOD,PERIOD1,SCENARIO,ENTITY_CODE,CFC_ENTITY_CODE,AMOUNT,CHANGES,AMOUNT_CHANGES,ACC_AMOUNT, DATA_TYPE, CHINA, E2) AS(
SELECT 
	ORDERS,
	FISCAL_YEAR,
	PERIOD,
	PERIOD1,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	AMOUNT,
	CHANGES,
	NVL(AMOUNT,0) AS AMOUNT_CHANGES,
	NVL(AMOUNT,0) AS ACC_AMOUNT,
	DATA_TYPE,
	CHINA,
	AMOUNT AS E2
FROM T_ORDER
WHERE ORDERS = 1
UNION ALL 
SELECT 
	T1.ORDERS,
	T1.FISCAL_YEAR,
	T1.PERIOD,
	T1.PERIOD1,
	T1.SCENARIO,
	T1.ENTITY_CODE,
	T1.CFC_ENTITY_CODE,
	T1.AMOUNT,
	T1.CHANGES,
	CASE 
	WHEN T1.CHANGES IS NULL THEN NVL(T1.AMOUNT,0)
	WHEN T1.DATA_TYPE = 'SHARES' AND T2.ACC_AMOUNT <= 0 THEN 0
	ELSE T1.CHANGES*T2.ACC_AMOUNT 
	END AS AMOUNT_CHANGES,
	CASE 
	WHEN TO_CHAR(T1.PERIOD1, 'YYYY') != T1.FISCAL_YEAR AND T1.CHANGES IS NULL AND T1.AMOUNT + T2.ACC_AMOUNT <= 0 THEN T2.ACC_AMOUNT * -1
	WHEN T1.CHANGES IS NULL THEN NVL(T1.AMOUNT,0)
	WHEN T1.DATA_TYPE = 'SHARES' AND T2.ACC_AMOUNT <= 0 THEN T2.ACC_AMOUNT * -1
	ELSE T1.CHANGES*T2.ACC_AMOUNT 
	END +NVL(T2.ACC_AMOUNT,0) AS ACC_AMOUNT,
	t1.DATA_TYPE,
	t1.CHINA,
	CASE 
	WHEN TO_CHAR(T1.PERIOD1, 'YYYY') != T1.FISCAL_YEAR AND T1.CHANGES IS NULL AND T1.AMOUNT + T2.ACC_AMOUNT <= 0 THEN 0
	WHEN T1.CHANGES IS NULL THEN NVL(T1.AMOUNT,0)
	WHEN T1.DATA_TYPE = 'SHARES' AND T2.ACC_AMOUNT <= 0 THEN 0
	ELSE T1.CHANGES*NVL(T2.ACC_AMOUNT,0) 
	END AS E2
FROM T_ORDER T1
JOIN DETAILS T2 ON T1.ORDERS = T2.ORDERS+1 AND T1.ENTITY_CODE = T2.ENTITY_CODE AND T1.CFC_ENTITY_CODE = T2.CFC_ENTITY_CODE AND T1.PERIOD = T2.PERIOD AND t1.SCENARIO = t2.SCENARIO AND t1.FISCAL_YEAR = t2.FISCAL_YEAR
)--SELECT * FROM DETAILS --WHERE TO_CHAR(PERIOD, 'YYYY-MM-DD') = '2027-12-31' AND SCENARIO = 'Per Audit' AND CFC_ENTITY_CODE = 'P00013_BVI' 
,CTE AS (
SELECT 
	ORDERS,
	FISCAL_YEAR,
	PERIOD,
	PERIOD1,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	AMOUNT,
	CHANGES,
	AMOUNT_CHANGES,
	ACC_AMOUNT,
	DATA_TYPE,
	CHINA,
	TRUNC(E2,0) AS E2
FROM DETAILS
WHERE FISCAL_YEAR IN (SELECT FISCAL_YEAR FROM FISCAL_YEAR)
ORDER BY ENTITY_CODE,
	CFC_ENTITY_CODE,SCENARIO,PERIOD,
	PERIOD1
)--SELECT * FROM CTE
,CTE_E1 AS (
SELECT
	t1.PERIOD,
	TO_CHAR(t1.PERIOD, 'YYYY') AS REC_YEAR,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.SCENARIO,
	t1.FISCAL_YEAR,
	t1.AMOUNT AS E1
FROM CTE t1
WHERE
	t1.AMOUNT > 0
)
,CTE_E5 AS (
SELECT
	PERIOD,
	FISCAL_YEAR,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	SUM(NVL(TRUNC(AMOUNT_CHANGES,0),0)) * -1 AS E5
FROM CTE 
WHERE TRUNC(PERIOD, 'YYYY') = TRUNC(PERIOD1, 'YYYY')
AND DATA_TYPE= 'SHARES'
GROUP BY PERIOD, FISCAL_YEAR, TO_CHAR(PERIOD, 'YYYY'), SCENARIO ,ENTITY_CODE, CFC_ENTITY_CODE
), CTE_E2 AS (
SELECT 
PERIOD,
FISCAL_YEAR,
SCENARIO,
ENTITY_CODE,
CFC_ENTITY_CODE,
SUM(E2) * -1 AS E2
FROM CTE
WHERE E2 <= 0 --AND ACC_AMOUNT != 0
AND TO_CHAR(PERIOD1,'yyyy')<=TO_CHAR(PERIOD,'yyyy')-1
GROUP BY PERIOD,
FISCAL_YEAR,
SCENARIO,
ENTITY_CODE,
CFC_ENTITY_CODE
)
,CTE2 AS (
SELECT
	t1.PERIOD,
	t1.REC_YEAR,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.SCENARIO,
	t1.FISCAL_YEAR,
	TRUNC(t1.E1, 0) AS E1,
	NVL(t3.E2, 0) AS E2,
	NVL(t2.E5,0) AS E5,
	NVL(t4.AMOUNT,0) AS E7
FROM CTE_E1 t1
LEFT JOIN CTE_E5 t2 ON t1.PERIOD = t2.PERIOD AND t1.FISCAL_YEAR = t2.FISCAL_YEAR AND t1.SCENARIO = t2.SCENARIO AND t1.ENTITY_CODE = t2.ENTITY_CODE AND t1.CFC_ENTITY_CODE = t2.CFC_ENTITY_CODE
LEFT JOIN CTE_E2 t3 ON t1.PERIOD = t3.PERIOD AND t1.FISCAL_YEAR = t3.FISCAL_YEAR AND t1.SCENARIO = t3.SCENARIO AND t1.ENTITY_CODE = t3.ENTITY_CODE AND t1.CFC_ENTITY_CODE = t3.CFC_ENTITY_CODE
LEFT JOIN TRS_FACT_CFC_E7 t4 ON t1.PERIOD = t4.PERIOD AND t1.FISCAL_YEAR = t4.FISCAL_YEAR AND t1.SCENARIO = t4.SCENARIO AND t1.ENTITY_CODE = t4.ENTITY_CODE AND t1.CFC_ENTITY_CODE = t4.CFC_ENTITY_CODE
)
,CTE_DIVIDEND AS (
SELECT
	PERIOD,
	FISCAL_YEAR,
	SCENARIO,
	ENTITY_CODE,
	CFC_ENTITY_CODE,
	AVG_EXCHANGE_RATIO,
	L_EXCHANGE_RATE_DATE,
	SUM(NON_CHINA_DIVIDEND_PROFIT_NTD6) AS DIVIDEND6,
	SUM(NON_CHINA_PAID_TAX_NTD10) AS DIVIDEND10,
	SUM(CHINA_DIVIDEND_PROFIT_NTD7) AS DIVIDEND7,
	SUM(CHINA_PAID_TAX_NTD11) AS DIVIDEND11
FROM V_TRS_FACT_CFC_DIVIDEND
GROUP BY PERIOD, FISCAL_YEAR, SCENARIO, ENTITY_CODE, CFC_ENTITY_CODE,L_EXCHANGE_RATE_DATE, AVG_EXCHANGE_RATIO
),CTE3 AS (
SELECT
	t1.PERIOD,
	t1.REC_YEAR,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.SCENARIO,
	t1.FISCAL_YEAR,
	t1.E1,
	t1.E2,
	NVL(t3.DIVIDEND6,0) - (t1.E7 * (t3.AVG_EXCHANGE_RATIO / t3.L_EXCHANGE_RATE_DATE)) AS E3,
	GREATEST(LEAST(DIVIDEND7, (t1.E1 - E2 - (NVL(t3.DIVIDEND6,0) - (t1.E7 * (t3.AVG_EXCHANGE_RATIO / t3.L_EXCHANGE_RATE_DATE))) - NVL(t1.E5,0 ))) ,0)AS E4,
	NVL(t3.DIVIDEND11,0) AS DIVIDEND11,
	NVL(t3.DIVIDEND6,0) AS DIVIDEND6,
	NVL(t3.DIVIDEND7,0) AS DIVIDEND7,
	NVL(t3.DIVIDEND10,0) AS DIVIDEND10,
	t3.AVG_EXCHANGE_RATIO,
	NVL(t3.L_EXCHANGE_RATE_DATE,0) AS L_EXCHANGE_RATE_DATE,
	t1.E5,
	t1.E7
FROM CTE2 t1
LEFT JOIN CTE_DIVIDEND t3 ON t1.PERIOD = t3.PERIOD AND t1.FISCAL_YEAR = t3.FISCAL_YEAR AND t1.SCENARIO = t3.SCENARIO AND t1.ENTITY_CODE = t3.ENTITY_CODE AND t1.CFC_ENTITY_CODE = t3.CFC_ENTITY_CODE
)
SELECT
	t1.PERIOD,
	t1.REC_YEAR,
	t1.ENTITY_CODE,
	t1.CFC_ENTITY_CODE,
	t1.SCENARIO,
	t1.FISCAL_YEAR,
	t1.E1,
	t1.E2,
	NVL(t1.E3,0) AS E3,
	NVL(t1.E4,0) AS E4,
	NVL(t1.E5,0) AS E5,
	t1.E1 - t1.E2 - NVL(t1.E3,0) - NVL(t1.E4,0) - NVL(t1.E5,0) AS E6,
	NVL(t1.E7,0) AS E7,
	NVL((t1.DIVIDEND7 -NVL(t1.E4,0)) * ( t1.L_EXCHANGE_RATE_DATE/t1.AVG_EXCHANGE_RATIO ),0) AS E8,
	t1.DIVIDEND10 * ( NVL(t1.E3,0)/AVG_EXCHANGE_RATIO) / ( ( t1.E3/AVG_EXCHANGE_RATIO) + (E7/L_EXCHANGE_RATE_DATE) ) AS E9,
	DIVIDEND11 * (NVL(t1.E4,0)/AVG_EXCHANGE_RATIO) / NVL(NULLIF( ( (t1.E4/AVG_EXCHANGE_RATIO) + ( ((t1.DIVIDEND7 - t1.E4) * (t1.L_EXCHANGE_RATE_DATE/t1.AVG_EXCHANGE_RATIO))/L_EXCHANGE_RATE_DATE) ) , 0), 1) AS E10,
	DIVIDEND10 - t1.DIVIDEND10 * ( NVL(t1.E3,0)/AVG_EXCHANGE_RATIO) / ( ( t1.E3/AVG_EXCHANGE_RATIO) + (E7/L_EXCHANGE_RATE_DATE) ) AS E11,
	DIVIDEND11 - DIVIDEND11 * (NVL(t1.E4,0)/AVG_EXCHANGE_RATIO) / NVL(NULLIF(( (t1.E4/AVG_EXCHANGE_RATIO) + (t1.DIVIDEND7 - t1.E4) * (t1.AVG_EXCHANGE_RATIO / t1.L_EXCHANGE_RATE_DATE) ), 0) ,1) AS E12,
	AVG_EXCHANGE_RATIO,
	L_EXCHANGE_RATE_DATE,
	DIVIDEND6,
	DIVIDEND7
FROM CTE3 t1;